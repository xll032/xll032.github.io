{"version":3,"sources":["webpack:///static/js/116.d48b69a3076a7ac360a1.js","webpack:///./src/page/Blog/BlogDetail/blog_107.vue","webpack:///./src/assets/js/blog.js?0dfb***********************************************************************************************************","webpack:///blog_107.vue","webpack:///./src/page/Blog/BlogDetail/blog_107.vue?b44c"],"names":["webpackJsonp","183","module","exports","__webpack_require__","Component","298","__webpack_exports__","data","arr","this","$store","state","initialBlogData","thisBlog","length","order","table_14","name","intro","count_21","table_37","type","value","table_42_1","tagName","child","attr","table_42_2","directive","explain","useage","table_42_3","table_42_4","table_42_5","table_45","table_62","table_66_1","def","table_66_2","table_66_3","val_76","table_90","name_93","popover_93","no","age","table_98","table_104","methods","window","location","href","substring","indexOf","tableRowClass_14","row","input_76","num","_num","parseInt","Math","round","click_93","del_93","_this","forEach","e","i","splice","mounted","document","documentElement","scrollTop","body","hash","includes","title","313","Object","defineProperty","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default","n","__WEBPACK_IMPORTED_MODULE_1__assets_js_blog__","592","render","_vm","_h","$createElement","_c","_self","staticClass","_v","_s","time","_l","tags","key","attrs","domProps","innerHTML","brief","_m","staticRenderFns"],"mappings":"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","file":"static/js/116.d48b69a3076a7ac360a1.js","sourcesContent":["webpackJsonp([116],{\n\n/***/ 183:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(78)(\n  /* script */\n  __webpack_require__(313),\n  /* template */\n  __webpack_require__(592),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 298:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  data: function data() {\n    var arr = this.$store.state.initialBlogData;\n    return {\n      thisBlog: arr[arr.length - 1 - this.order()],\n      table_14: [{ name: 'pointer', intro: '手（ie5 用的是 hand）' }, { name: 'crosshair', intro: '十字准心（切图的感觉）' }, { name: 'wait', intro: '等待/沙漏（一般为一块表或者一个沙漏，新版 windows 是蓝圈圈）' }, { name: 'help', intro: '帮助（一般为问号或者气球）' }, { name: 'no-drop', intro: '无法释放（chrome下是禁止的标志，和not-allowed一样）' }, { name: 'text', intro: '文字/编辑' }, { name: 'move', intro: '可移动对象' }, { name: 'n-resize', intro: '向上改变大小（北，north 上下箭头）' }, { name: 's-resize', intro: '向下改变大小（南，south 上下箭头）' }, { name: 'e-resize', intro: '向右改变大小（东，east 左右箭头）' }, { name: 'w-resize', intro: '向左改变大小（西，west 左右箭头）' }, { name: 'ne-resize', intro: '向上右改变大小（north east 右斜箭头）' }, { name: 'sw-resize', intro: '向下左改变大小（south west 右斜箭头）' }, { name: 'nw-resize', intro: '向上左改变大小（north west 左斜箭头）' }, { name: 'se-resize', intro: '向下右改变大小（south east 左斜箭头）' }, { name: 'auto', intro: '自动（浏览器设置一个游标，效果不确定）' }, { name: 'not-allowed', intro: '禁止' }, { name: 'progress', intro: '处理中（鼠标边上一个小沙漏，新版 windows 是蓝圈圈）' }, { name: 'default', intro: '系统默认（鼠标箭头）' }, { name: 'url(\"#\")', intro: '自定义（可用动画，文件格式必须是.cur或.ani），此项无效果展示' }, { name: 'none', intro: '无指针' }],\n      count_21: 0,\n      table_37: [{ name: 'false', type: 'boolean', value: '假值' }, { name: '0', type: 'number', value: '假值' }, { name: '\"\"（空字符串）', type: 'string', value: '假值' }, { name: 'null', type: 'object', value: '空值' }, { name: 'undefined', type: 'undefined', value: '空值' }],\n      table_42_1: [{\n        name: '矩形',\n        tagName: 'rect',\n        child: [{ attr: 'x', intro: '矩形左上角的 x 位置' }, { attr: 'y', intro: '矩形左上角的 y 位置' }, { attr: 'rx', intro: 'x 方位的圆角半径' }, { attr: 'ry', intro: 'y 方位的圆角半径' }, { attr: 'width', intro: '矩形宽度' }, { attr: 'height', intro: '矩形高度' }]\n      }, {\n        name: '矩形',\n        tagName: 'rect',\n        child: [{ attr: 'x', intro: '矩形左上角的 x 位置' }, { attr: 'y', intro: '矩形左上角的 y 位置' }, { attr: 'rx', intro: 'x 方位的圆角半径' }, { attr: 'ry', intro: 'y 方位的圆角半径' }, { attr: 'width', intro: '矩形宽度' }, { attr: 'height', intro: '矩形高度' }]\n      }, {\n        name: '圆形',\n        tagName: 'circle',\n        child: [{ attr: 'r', intro: '圆的半径' }, { attr: 'cx', intro: '圆心的 x 位置' }, { attr: 'cy', intro: '圆心的 y 位置' }]\n      }, {\n        name: '椭圆',\n        tagName: 'ellipse',\n        child: [{ attr: 'rx', intro: '椭圆的 x 半径' }, { attr: 'ry', intro: '椭圆的 y 半径' }, { attr: 'cx', intro: '椭圆中心的 x 位置' }, { attr: 'cy', intro: '椭圆中心的 y 位置' }]\n      }, {\n        name: '椭圆',\n        tagName: 'ellipse',\n        child: [{ attr: 'rx', intro: '椭圆的 x 半径' }, { attr: 'ry', intro: '椭圆的 y 半径' }, { attr: 'cx', intro: '椭圆中心的 x 位置' }, { attr: 'cy', intro: '椭圆中心的 y 位置' }]\n      }, {\n        name: '线条',\n        tagName: 'line',\n        child: [{ attr: 'x1', intro: '起点的 x 位置' }, { attr: 'x2', intro: '终点的 x 位置' }, { attr: 'y1', intro: '起点的 y 位置' }, { attr: 'y2', intro: '终点的 y 位置' }]\n      }, {\n        name: '折线',\n        tagName: 'polyline',\n        child: [{ attr: 'points', intro: '每次都要有两个坐标点，由空格和逗号分隔，例如：points=\"60 110,50 20,11 22\" ' }]\n      }, {\n        name: '多边形',\n        tagName: 'polygon',\n        child: [{ attr: 'points', intro: '与折线用法一样，区别是：多边形会自动回到第一个点连接' }]\n      }, {\n        name: '路径',\n        tagName: 'path',\n        child: [{ attr: 'd', intro: '点集数列（比较复杂，后面会展开介绍）' }]\n      }],\n      table_42_2: [{ directive: 'M', explain: '移动至', useage: '\"M10 10\"', intro: '将画笔移动到 (10,10) 的位置（并没有画线）' }, { directive: 'L', explain: '画至', useage: '\"L20 20\"', intro: '会在指定的位置和画笔位置之间画一条直线' }, { directive: 'H', explain: '绘制平行线', useage: '\"H 90\"', intro: '在 x 轴上移动距离画出垂直线' }, { directive: 'V', explain: '绘制垂直线', useage: '\"V 90\"', intro: '在 y 轴上移动距离画出平行线' }, { directive: 'M', explain: '移动至', useage: '\"M10 10\"', intro: '将画笔移动到(10,10)的位置（并没有画线' }, { directive: 'Z(z)', explain: '闭合路径命令', useage: '\"M10 10 H 90 V 90 H 10 z\"', intro: '闭合所指的路径' }],\n      table_42_3: [{ directive: 'C(c)', explain: '三次贝塞尔曲线', useage: '\"Cx1 y1,x2 y2,x y\"', intro: '1 是起点控制点，2 是终点控制点，x y 是曲线终点（曲线起点就是画笔位置，控制点类似于 ps 中的锚点）' }, { directive: 'S', explain: '复制一相同曲线（三次）', useage: '\"C20 20,40 20,50 10 S x2 y2,x y\"', intro: '如果S命令跟在一个 C 命令或者另一个 S 命令的后面，它的第一个控制点，就会被假设成前一个控制点的对称点。如果 S 命令单独使用，前面没有 C 命令或者另一个 S 命令，那么它的两个控制点就会被假设为同一个点（参数含义跟 C 命令差不多）' }, { directive: 'Q', explain: '二次贝塞尔曲线 \"Qx1 y1,x y\"', useage: '\"H 90\"', intro: '只有一个控制点 x1,y1 用来确定起点终点的斜率（通俗的讲，就是三点画出一个曲线）' }, { directive: 'T', explain: '复制一相同曲线（二次）', useage: '\"C20 20,40 20 Tx y\"', intro: '控制点会自动推断，只需定义曲线终点即可' }, { directive: 'Z(z)', explain: '闭合路径命令', useage: '\"M10 10 H 90 V 90 H 10 z\"', intro: '闭合所指的路径' }],\n      table_42_4: [{ directive: 'A', explain: '弧形命令', useage: '\"Arx ry x-axis-rotation large-arc-flag sweep-flag x y\"', intro: '弧形可视为圆形或椭圆形的一部分' }],\n      table_42_5: [{ name: 'fill', intro: '设置对象内部的颜色' }, { name: 'stroke', intro: '设置绘制对象的线条的颜色，可以用 css 颜色命名方案定义颜色（颜色英文名、rgb、十六进制、rgba）' }, { name: 'fill-opacity', intro: '控制填充色的不透明度' }, { name: 'stroke-opacity', intro: '控制描边的不透明度' }, { name: 'stroke-linecap', intro: '描边方式 属性值：butt（用直边结束线段，不会超出描边） square（会稍微超出描边，超出量由 stroke-width 控制） round（边框终点是圆角，也由 stroke-width 控制）' }, { name: 'stroke-width', intro: '描边宽度（以路径为中心线绘制的）' }, { name: 'stroke-linejoin', intro: '控制两条描边线段之间用什么方式连接 属性值：miter（尖角转折） round（圆角转折） bevel（斜接转折）' }, { name: 'stroke-dasharray', intro: '属性值：a,b,c（三个数字，必须用逗号隔开）第一个表示填色区域的长度，第二个表示非填色区域的长度，第三个表示填色区域长度' }, { name: 'stroke-miterlimit', intro: '定义什么情况下绘制或不绘制边框连接的 miter 效果' }, { name: 'stroke-dashoffset', intro: '定义虚线开始的位置' }, { name: 'fill-rule', intro: '定义如何给图形重叠的区域上色（不太清楚如何使用）' }],\n      table_45: [{ name: 'host', intro: '返回 url 的主机部分，如：www.xxxx.com （host包含端口号，如：www.xxxx.com:81）' }, { name: 'hostname', intro: '返回 www.xxxx.com (hostname不包含端口号，默认的80是不显示的）' }, { name: 'href', intro: '返回 url 字符串（在浏览器中就是完整的地址栏）' }, { name: 'pathname', intro: '返回 地址路径 如 www.xxxx.com/aaa/bb/c  得到 /aaa/bb/c' }, { name: 'protocol', intro: '返回 url 的协议部分 如 http:,ftp:,maito: 等等' }, { name: 'port', intro: '返回 url 的端口部分，如果采用默认的 80 端口，返回的是空字符而不是默认的 80' }],\n      table_62: [{ name: 'ajaxStart', type: '全局', intro: '开始的方法' }, { name: 'beforeSend', type: '局部', intro: '发送前的方法，可用于验证' }, { name: 'ajaxSend', type: '全局', intro: '发送时的方法' }, { name: 'success', type: '局部', intro: '成功后的回调' }, { name: 'ajaxSuccess', type: '全局', intro: '成功后的方法' }, { name: 'error', type: '局部', intro: '错误后的回调' }, { name: 'ajaxError', type: '全局', intro: '错误后的方法' }, { name: 'complete', type: '局部', intro: '完成后的回调，无论失败成功' }, { name: 'ajaxComplete', type: '全局', intro: '完成后的方法，无论失败成功' }, { name: 'ajaxStop', type: '全局', intro: '停止的方法' }],\n      table_66_1: [{ name: 'range', type: 'Array', def: '[]', intro: 'mode 为 selector 时，range 有效' }, { name: 'value', type: 'Number', def: '0', intro: 'mode 为 selector 时，是数字，表示选择了 range 中的第几个' }, { name: 'bindchange', type: 'Function（EventHandle）', def: '', intro: 'value 值改变后触发 change 事件，event.detail={value:value}' }],\n      table_66_2: [{ name: 'value', type: 'String', def: '', intro: '表示选中的时间，格式为 “hh:mm”' }, { name: 'start', type: 'String', def: '', intro: '表示有效时间范围的开始，格式为 “hh:mm”' }, { name: 'end', type: 'String', def: '', intro: '表示有效时间范围的结束，格式为 “hh:mm”' }, { name: 'bindchange', type: 'Function（EventHandle）', def: '', intro: 'value 值改变后触发 change 事件，event.detail={value:value}' }],\n      table_66_3: [{ name: 'value', type: 'String', def: '0', intro: '表示选中的日期，格式为 “yyyy-MM-dd”' }, { name: 'start', type: 'String', def: '', intro: '表示有效日期范围的开始，格式为 “yyyy-MM-dd”' }, { name: 'end', type: 'String', def: '', intro: '表示有效日期范围的结束，格式为 “yyyy-MM-dd”' }, { name: 'bindchange', type: 'Function（EventHandle）', def: '', intro: 'value 值改变后触发 change 事件，event.detail={value:value}' }],\n      val_76: 0,\n      table_90: [{ name: '2D-Position', intro: '允许通过拖曳移动绝对定位的对象' }, { name: 'AbsolutePosition', intro: '设定元素的 position 属性为“absolute”(绝对)' }, { name: 'BackColor', intro: '设置或获取当前选中区的背景颜色' }, { name: 'BlockDirLTR', intro: '目前尚未支持' }, { name: 'BlockDirRTL', intro: '目前尚未支持' }, { name: 'Bold', intro: '切换当前选中区的粗体显示与否' }, { name: 'BrowseMode', intro: '目前尚未支持' }, { name: 'Copy', intro: '将当前选中区复制到剪贴板' }, { name: 'CreateBookmark', intro: '创建一个书签锚或获取当前选中区或插入点的书签锚的名称' }, { name: 'CreateLink', intro: '在当前选中区上插入超级链接，或显示一个对话框允许用户指定要为当前选中区插入的超级链接的 URL' }, { name: 'Cut', intro: '将当前选中区删除并复制到剪贴板' }, { name: 'Delete', intro: '删除当前选中区' }, { name: 'DirLTR', intro: '目前尚未支持' }, { name: 'DirRTL', intro: '目前尚未支持' }, { name: 'EditMode', intro: '目前尚未支持' }, { name: 'FontName', intro: '设置或获取当前选中区的字体' }, { name: 'FontSize', intro: '设置或获取当前选中区的字体大小' }, { name: 'ForeColor', intro: '设置或获取当前选中区的前景(文本)颜色' }, { name: 'FormatBlock', intro: '设置当前块格式化标签' }, { name: 'Indent', intro: '增加选中文本的缩进' }, { name: 'InlineDirLTR', intro: '目前尚未支持' }, { name: 'InlineDirRTL', intro: '目前尚未支持。' }, { name: 'InsertButton', intro: '用按钮控件覆盖当前选中区' }, { name: 'InsertFieldset', intro: '用方框覆盖当前选中区' }, { name: 'InsertHorizontalRule', intro: '用水平线覆盖当前选中区' }, { name: 'InsertIFrame', intro: '用内嵌框架覆盖当前选中区' }, { name: 'InsertImage', intro: '用图像覆盖当前选中区' }, { name: 'InsertInputButton', intro: '用按钮控件覆盖当前选中区。' }, { name: 'InsertInputCheckbox', intro: '用复选框控件覆盖当前选中区' }, { name: 'InsertInputFileUpload', intro: '用文件上载控件覆盖当前选中区' }, { name: 'InsertInputHidden', intro: '插入隐藏控件覆盖当前选中区' }, { name: 'InsertInputImage', intro: '用图像控件覆盖当前选中区' }, { name: 'InsertInputPassword', intro: '用密码控件覆盖当前选中区' }, { name: 'InsertInputRadio', intro: '用单选钮控件覆盖当前选中区' }, { name: 'InsertInputReset', intro: '用重置控件覆盖当前选中区' }, { name: 'InsertInputSubmit', intro: '用提交控件覆盖当前选中区' }, { name: 'InsertInputText', intro: '用文本控件覆盖当前选中区' }, { name: 'InsertMarquee', intro: '用空字幕覆盖当前选中区' }, { name: 'InsertOrderedList', intro: '切换当前选中区是编号列表还是常规格式化块' }, { name: 'InsertParagraph', intro: '用换行覆盖当前选中区' }, { name: 'InsertSelectDropdown', intro: '用下拉框控件覆盖当前选中区' }, { name: 'InsertSelectListbox', intro: '用列表框控件覆盖当前选中区' }, { name: 'InsertTextArea', intro: '用多行文本输入控件覆盖当前选中区' }, { name: 'InsertUnorderedList', intro: '切换当前选中区是项目符号列表还是常规格式化块' }, { name: 'Italic', intro: '切换当前选中区斜体显示与否' }, { name: 'JustifyCenter', intro: '将当前选中区在所在格式化块置中。' }, { name: 'JustifyFull', intro: '目前尚未支持。' }, { name: 'JustifyLeft', intro: '将当前选中区所在格式化块左对齐' }, { name: 'JustifyNone', intro: '目前尚未支持' }, { name: 'JustifyRight', intro: '将当前选中区所在格式化块右对齐' }, { name: 'LiveResize', intro: '迫使 MSHTML 编辑器在缩放或移动过程中持续更新元素外观，而不是只在移动或缩放完成后更新' }, { name: 'MultipleSelection', intro: '允许当用户按住 Shift 或 Ctrl 键时一次选中多于一个站点可选元素' }, { name: 'Open', intro: '打开' }, { name: 'Outdent', intro: '减少选中区所在格式化块的缩进' }, { name: 'OverWrite', intro: '切换文本状态的插入和覆盖' }, { name: 'Paste', intro: '用剪贴板内容覆盖当前选中区' }, { name: 'PlayImage', intro: '目前尚未支持' }, { name: 'Print', intro: '打开打印对话框以便用户可以打印当前页' }, { name: 'Redo', intro: '重做' }, { name: 'Refresh', intro: '刷新当前文档' }, { name: 'RemoveFormat', intro: '从当前选中区中删除格式化标签' }, { name: 'RemoveParaFormat', intro: '目前尚未支持' }, { name: 'SaveAs', intro: '将当前 Web 页面保存为文件' }, { name: 'SelectAll', intro: '选中整个文档' }, { name: 'SizeToControl', intro: '目前尚未支持' }, { name: 'SizeToControlHeight', intro: '目前尚未支持' }, { name: 'SizeToControlWidth', intro: '目前尚未支持' }, { name: 'Stop', intro: '停止' }, { name: 'StopImage', intro: '目前尚未支持' }, { name: 'StrikeThrough', intro: '目前尚未支持' }, { name: 'Subscript', intro: '目前尚未支持。' }, { name: 'Superscript', intro: '目前尚未支持。' }, { name: 'UnBookmark', intro: '从当前选中区中删除全部书签' }, { name: 'Underline', intro: '切换当前选中区的下划线显示与否' }, { name: 'Undo', intro: '撤消' }, { name: 'Unlink', intro: '从当前选中区中删除全部超级链接' }, { name: 'Unselect', intro: '清除当前选中区的选中状态' }],\n      name_93: '',\n      popover_93: [{ no: '001', name: '张三', age: '18', state: false }, { no: '002', name: '李四', age: '18', state: false }, { no: '003', name: '王五', age: '18', state: false }, { no: '004', name: '赵钱孙李', age: '18', state: false }],\n      table_98: [{ name: 'Ctrl+C', intro: '终止当前命令的快捷键，可以跳入下一行' }, { name: 'Tab', intro: '命令打到一半的时候会自动补全，甚至目录也能补全' }, { name: 'Ctrl+D', intro: '退出当前终端，和 exit 效果相同' }, { name: 'Ctrl+Z', intro: '暂停当前进程，正在运行的命令，如果觉得有问题可以暂停它' }, { name: 'Ctrl+L', intro: '清屏' }, { name: 'man', intro: '查看帮助（例如 man ls）' }, { name: 'fg', intro: '将后台命令调至前台继续运行' }, { name: 'bg', intro: '将一个在后台暂停的命令，变成继续执行' }, { name: 'jobs', intro: '查看当前有多少后台运行的命令' }, { name: 'mkdir', intro: '创建一个目录' }, { name: 'rmdir', intro: '删除一个目录（不能删不为空的）' }, { name: 'rm', intro: '删除目录或文件' }],\n      table_104: [{ name: '<span class=\"code\">get(target,propKey,receive)</span>', intro: '拦截对象属性的读取。' }, { name: '<span class=\"code\">set(target,propKey,value,receive)</span>', intro: '拦截对象属性的设置，返回一个布尔值。' }, { name: '<span class=\"code\">has(target, propKey)</span>', intro: '拦截 <span class=\"code\">propKey in proxy</span> 的操作，返回一个布尔值。' }, { name: '<span class=\"code\">deleteProperty(target, propKey)</span>', intro: '拦截 <span class=\"code\">delete proxy[propKey]</span> 的操作，返回一个布尔值。' }, { name: '<span class=\"code\">ownKeys(target)</span>', intro: '拦截 <span class=\"code\">Object.getOwnPropertyNames(proxy)</span>、<span class=\"code\">Object.getOwnPropertySymbols(proxy)</span>、<span class=\"code\">Object.keys(proxy)</span>，返回一个数组。' }, { name: '<span class=\"code\">getOwnPropertyDescriptor(target, propKey)</span>', intro: '拦截 <span class=\"code\">Object.getOwnPropertyDescriptor(proxy, propKey)</span>，返回属性的描述对象。' }, { name: '<span class=\"code\">defineProperty(target, propKey, propDesc)</span>', intro: '拦截 <span class=\"code\">Object.defineProperty(proxy, propKey, propDesc)</span>、<span class=\"code\">Object.defineProperties(proxy, propDescs)</span>，返回一个布尔值。' }, { name: '<span class=\"code\">preventExtensions(target)</span>', intro: '拦截 <span class=\"code\">Object.preventExtensions(proxy)</span>，返回一个布尔值。' }, { name: '<span class=\"code\">getPrototypeOf(target)</span>', intro: '拦截 <span class=\"code\">Object.getPrototypeOf(proxy)</span>，返回一个对象。' }, { name: '<span class=\"code\">isExtensible(target)</span>', intro: '拦截<span class=\"code\">Object.isExtensible(proxy)</span>，返回一个布尔值。' }, { name: '<span class=\"code\">setPrototypeOf(target, proto)</span>', intro: '拦截 <span class=\"code\">Object.setPrototypeOf(proxy, proto)</span>，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。' }, { name: '<span class=\"code\">apply(target, object, args)</span>', intro: '拦截 <span class=\"code\">Proxy</span> 实例作为函数调用的操作，比如 <span class=\"code\">proxy(...args)、proxy.call(object, ...args)</span>、<span class=\"code\">proxy.apply(...)</span>。' }, { name: '<span class=\"code\">construct(target, args)</span>', intro: '拦截 <span class=\"code\">Proxy</span> 实例作为构造函数调用的操作，比如 <span class=\"code\">new proxy(...args)</span>。' }]\n    };\n  },\n\n  methods: {\n    order: function order() {\n      return window.location.href.substring(window.location.href.indexOf('_') + 1) - 1;\n    },\n    tableRowClass_14: function tableRowClass_14(row) {\n      return row.row.name;\n    },\n    input_76: function input_76(num) {\n      if (num === null) return '0';\n      if (num === '') return '0';\n      var _num = void 0;\n      if (typeof num === 'string') {\n        _num = parseInt(num);\n      } else {\n        _num = num;\n      }\n      if (_num < 0) return 0;else if (_num < 9999) return _num;else if (_num < 99999999) return Math.round(_num / 10000 * 100) / 100 + '万';else if (_num < 999999999999) return Math.round(_num / 100000000 * 100) / 100 + '亿';else if (_num < 9999999999999999) return Math.round(_num / 100000000 * 100) / 100 + '万亿';else if (_num < 99999999999999999999) return Math.round(_num / 100000000 * 100) / 100 + '亿亿';else return '太多了，不玩了';\n    },\n    click_93: function click_93(name) {\n      this.name_93 = name;\n    },\n    del_93: function del_93() {\n      var _this = this;\n\n      this.popover_93.forEach(function (e, i) {\n        if (e.name === _this.name_93) {\n          _this.popover_93.splice(i, 1);\n        }\n      });\n    }\n  },\n  mounted: function mounted() {\n    document.documentElement.scrollTop = document.body.scrollTop = 0;\n    if (location.hash.includes('blog_')) document.title = this.thisBlog.title + ' - 龙';\n  }\n});\n\n/***/ }),\n\n/***/ 313:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__ = __webpack_require__(46);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__assets_js_blog__ = __webpack_require__(298);\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_extends___default()({}, __WEBPACK_IMPORTED_MODULE_1__assets_js_blog__[\"a\" /* default */]));\n\n/***/ }),\n\n/***/ 592:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"blog\"\n  }, [_c('header', [_c('p', {\n    staticClass: \"title\"\n  }, [_vm._v(_vm._s(_vm.thisBlog.title))]), _vm._v(\" \"), _c('p', {\n    staticClass: \"time\"\n  }, [_vm._v(\"\\n            \" + _vm._s(_vm.thisBlog.time) + \"\\n            \"), _vm._l((_vm.thisBlog.tags), function(tags) {\n    return _c('el-tag', {\n      key: tags.name,\n      attrs: {\n        \"type\": tags.type\n      }\n    }, [_vm._v(_vm._s(tags.name))])\n  })], 2)]), _vm._v(\" \"), _c('section', [_c('p', {\n    staticClass: \"subtitle\"\n  }, [_vm._v(\"前言\")]), _vm._v(\" \"), _c('p', {\n    domProps: {\n      \"innerHTML\": _vm._s(_vm.thisBlog.brief)\n    }\n  }, [_vm._v(_vm._s(_vm.thisBlog.brief))]), _vm._v(\" \"), _c('p', {\n    staticClass: \"subtitle\"\n  }, [_vm._v(\"正文\")]), _vm._v(\" \"), _c('p', {\n    staticClass: \"minititle\"\n  }, [_vm._v(\"一、原理\")]), _vm._v(\" \"), _c('p', [_vm._v(\"\\n            首先看一个例子：\\n        \")]), _vm._v(\" \"), _vm._m(0), _vm._v(\" \"), _vm._m(1), _vm._v(\" \"), _vm._m(2), _vm._v(\" \"), _c('p', [_vm._v(\"\\n            2、在实例上调用指定的方法；\\n        \")]), _vm._v(\" \"), _c('p', [_vm._v(\"\\n            3、销毁这个实例。\\n        \")]), _vm._v(\" \"), _vm._m(3), _vm._v(\" \"), _vm._m(4), _vm._v(\" \"), _vm._m(5), _vm._v(\" \"), _c('p', {\n    staticClass: \"minititle\"\n  }, [_vm._v(\"二、Object 构造函数\")]), _vm._v(\" \"), _vm._m(6), _vm._v(\" \"), _vm._m(7), _vm._v(\" \"), _vm._m(8), _vm._v(\" \"), _c('p', {\n    staticClass: \"minititle\"\n  }, [_vm._v(\"三、Boolean 类型\")]), _vm._v(\" \"), _vm._m(9), _vm._v(\" \"), _vm._m(10), _vm._v(\" \"), _vm._m(11), _vm._v(\" \"), _c('p', {\n    staticClass: \"minititle\"\n  }, [_vm._v(\"四、Number 类型\")]), _vm._v(\" \"), _vm._m(12), _vm._v(\" \"), _vm._m(13), _vm._v(\" \"), _vm._m(14), _vm._v(\" \"), _vm._m(15), _vm._v(\" \"), _vm._m(16), _vm._v(\" \"), _vm._m(17), _vm._v(\" \"), _vm._m(18), _vm._v(\" \"), _vm._m(19), _vm._v(\" \"), _c('p', {\n    staticClass: \"minititle\"\n  }, [_vm._v(\"五、String 类型\")]), _vm._v(\" \"), _vm._m(20), _vm._v(\" \"), _vm._m(21), _vm._v(\" \"), _vm._m(22), _vm._v(\" \"), _vm._m(23), _vm._v(\" \"), _vm._m(24), _vm._v(\" \"), _vm._m(25), _vm._v(\" \"), _vm._m(26)])])\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    staticClass: \"code\"\n  }, [_c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"var \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"s1\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" = \")]), _c('span', {\n    staticClass: \"str\"\n  }, [_vm._v(\"'new string'\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\";\")]), _c('br'), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"var \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"s2\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" = \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"s1\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"substring\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(2);\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            基本类型值不是对象，从逻辑上讲不应该有方法（实际是有的）。为了实现这种直观的操作，后台自动完成的一系列的处理，第二行代码访问 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"s1\")]), _vm._v(\" 的时候，访问过程处于一种读取模式，也就是从内存中读取这个字符串的值。在读取过程中，后台自动完成了下列处理：\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            1、创建 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"String\")]), _vm._v(\" 类型的一个实例；\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            这三步操作相当于（经过这样的处理，就把基本的类型转化为了对象。也同样适用于 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Boolean\")]), _vm._v(\" 和 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Number\")]), _vm._v(\"）：\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    staticClass: \"code\"\n  }, [_c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"var \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"s1\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" = \")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"new \")]), _c('span', {\n    staticClass: \"fun\"\n  }, [_vm._v(\"String\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(\")]), _c('span', {\n    staticClass: \"str\"\n  }, [_vm._v(\"'new string'\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\");\")]), _c('br'), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"var \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"s2\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" = \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"s1\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"substring\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(2);\")]), _c('br'), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"s1\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" = null\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\";\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            引用类型和基本包装类型的主要区别就是对象的生存期。使用 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"New\")]), _vm._v(\" 操作符创建的引用类型的实例，在执行流离开当前作用域之前都保存在内存中，而自动创建的基本包装类型的对象，只存在于执行代码的瞬间，之后就会被销毁。也就是说，不能在运行时为基本类型添加属性和方法。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Object\")]), _vm._v(\" 构造函数会像工厂方法一样，根据传入值的类型返回相应包装类型的实例。例如：\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    staticClass: \"code\"\n  }, [_c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"var \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"obj\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" = \")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"new \")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"Object\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(\")]), _c('span', {\n    staticClass: \"str\"\n  }, [_vm._v(\"'some text'\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\");\")]), _c('br'), _c('span', {\n    staticClass: \"spe\"\n  }, [_vm._v(\"console\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"spe\"\n  }, [_vm._v(\"log\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(\")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"obj\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" instanceof \")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"String\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\");\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // true\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            上例中，将字符串传给 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Object\")]), _vm._v(\" 构造函数，就创建了 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"String\")]), _vm._v(\" 的实例（传入什么类型就会得到什么类型的实例）。而直接调用转型函数不同。例如： \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\" console.log( typeof Number('25') )\")]), _vm._v(\"（结果是 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Number\")]), _vm._v(\" 类型）。如果是特定类型的构造函数则是：\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\" console.log( typeof new Number('25') )\")]), _vm._v(\"（结果是 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Object\")]), _vm._v(\" 类型，保存的是 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Number\")]), _vm._v(\" 的实例对象）。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Boolean\")]), _vm._v(\" 对象在 ECMAScript 中用处不大，而且会造成误解。例如：\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    staticClass: \"code\"\n  }, [_c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"var \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"fObject\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" = new \")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"Boolean\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"false\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\");\")]), _c('br'), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"var \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"fValue\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" = \")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"false\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\";\")]), _c('br'), _c('span', {\n    staticClass: \"spe\"\n  }, [_vm._v(\"console\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"spe\"\n  }, [_vm._v(\"log\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(\")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"fObject\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" && true\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\");\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // true\")]), _c('br'), _c('span', {\n    staticClass: \"spe\"\n  }, [_vm._v(\"console\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"spe\"\n  }, [_vm._v(\"log\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(\")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"fValue\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" && true\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\");\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // false\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            因为第一个是作为对象（\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Object\")]), _vm._v(\"）去判断的，所以会被认为是 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"true\")]), _vm._v(\"，而后面的 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"fValue\")]), _vm._v(\" 才是真正的 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"false\")]), _vm._v(\"。只要能理解它们的区别就好了，不建议使用 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Boolean\")]), _vm._v(\" 对象。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            与 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Boolean\")]), _vm._v(\" 类型一样，\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Number\")]), _vm._v(\" 也重写了 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"valueOf()\")]), _vm._v(\"、\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toLocaleString()\")]), _vm._v(\"、\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toString()\")]), _vm._v(\" 方法。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"valueOf()\")]), _vm._v(\" 返回对象表示的基本类型的数值，另外两个方法返回字符串形式的数值。\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toString()\")]), _vm._v(\" 还能返回数值的字符串形式，例如：\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    staticClass: \"code\"\n  }, [_c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"var \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"num\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" = \")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"10;\")]), _c('br'), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"num\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"toString\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"();\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // '10' \")]), _c('br'), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"num\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"toString\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(2);\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // '2' \")]), _c('br'), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"num\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"toString\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(8);\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // '8' \")]), _c('br'), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"num\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"toString\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(10);\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // '10' \")]), _c('br'), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"num\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"toString\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(16);\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // 'a' \")]), _c('br')])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toFixed()\")]), _vm._v(\" 方法有四舍五入的功能，很适合用于处理货币，在 IE8 及更早的版本不能正确识别 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"{(-0.94, -0.5),(0.5, 0.94)}\")]), _vm._v(\" 区间内的值（统一返回 0 ，而不是 -1 或 1）。IE9 修复了这个问题。\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toFixed()\")]), _vm._v(\" 方法的标准是可以保留到 20 位，但有些浏览器可能会支持更多位数。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toExponential()\")]), _vm._v(\" 方法是将数值转换为科学计数法，如 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"(12).toExponential()\")]), _vm._v(\" 得到的结果是  \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"1.2e+1\")]), _vm._v(\"。但是这个方法将所有值都转化为科学计数法，如 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"12\")]), _vm._v(\" 这样的小数字没有必要转为科学计数法。这时候不需要使用 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"if\")]), _vm._v(\" 判断，因为还有 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toPrecision()\")]), _vm._v(\" 方法下面介绍一下这种方法。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toPrecision()\")]), _vm._v(\" 会根据传入的参数去识别保留位数，还是转为科学计数法。如：\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    staticClass: \"code\"\n  }, [_c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(12).\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"toPrecision\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(3);\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // '12.0'\")]), _c('br'), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(120).\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"toPrecision\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(3);\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // '120'\")]), _c('br'), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(1200).\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"toPrecision\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(3);\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // '1.20e+3'\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            与 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Boolean\")]), _vm._v(\" 一样，使用 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"new Number()\")]), _vm._v(\" 创建的数组类型是 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"“object”\")]), _vm._v(\"。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            有两个用于访问字符串中特定字符的方法。\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"charAt()\")]), _vm._v(\"：用于返回指定下标位置的字符；\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"charCodeAt()\")]), _vm._v(\"：用于范围指定下标位置的字符编码。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"concat()\")]), _vm._v(\" 是字符串拼接方法。使用示例（实际使用中一般直接使用 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"+\")]), _vm._v(\" 拼接）：\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    staticClass: \"code\"\n  }, [_c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"var \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"str\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" = \")]), _c('span', {\n    staticClass: \"str\"\n  }, [_vm._v(\"'Hello,'\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\";\")]), _c('br'), _c('span', {\n    staticClass: \"spe\"\n  }, [_vm._v(\"console\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"spe\"\n  }, [_vm._v(\"log\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(\")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"str\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"concat\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(\")]), _c('span', {\n    staticClass: \"str\"\n  }, [_vm._v(\"'world'\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\",\")]), _c('span', {\n    staticClass: \"str\"\n  }, [_vm._v(\"'!'\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"));\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // Hello,world!  可以传多个参数\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            基于子字符串的创建方法：\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"slice()\")]), _vm._v(\"、\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"substr()\")]), _vm._v(\"、\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"substring()\")]), _vm._v(\"。这里不展开介绍这几个方法了。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            字符串的位置方法：\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"indexOf()\")]), _vm._v(\"、\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"lastIndexOf()\")]), _vm._v(\"。这两个方法也不展开介绍。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('span', {\n    staticClass: \"tip\"\n  }, [_vm._v(\"ES5\")]), _vm._v(\" 还提供了删除字符串首尾空格的方法：\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"trim()\")]), _vm._v(\"。这个方法会创建一个副本（即不改变原字符串）将前置及后缀的空格删除并返回。支持这个方法的浏览器有：IE 9+、Firefox 3.5+、Safari 5+、Chrome 8+。此外 Chrome 8+ 还支持非标准的 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"trimLeft()\")]), _vm._v(\" 和 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"trimRight()\")]), _vm._v(\"，分别用于删除字符串开头或结尾的空格。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            字符串大小写转换的方法：\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toLowerCase()\")]), _vm._v(\"、\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toLocaleLowerCase()\")]), _vm._v(\"、\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toUpperCase()\")]), _vm._v(\"、\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toLocaleUpperCase()\")]), _vm._v(\"。不展开介绍这些方法，\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Locale\")]), _vm._v(\" 是针对某些特殊地区的语言的实现，对于非特殊的语言使用哪一个结果是一样的。如果不知道运行的语言环境使用 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Locale\")]), _vm._v(\" 对更加稳妥。\\n        \")])\n}]}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/116.d48b69a3076a7ac360a1.js","var Component = require(\"!../../../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./blog_107.vue\"),\n  /* template */\n  require(\"!!../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-a742facc\\\",\\\"hasScoped\\\":false}!../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./blog_107.vue\"),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/page/Blog/BlogDetail/blog_107.vue\n// module id = 183\n// module chunks = 116","export default {\r\n  data () {\r\n    const arr = this.$store.state.initialBlogData;\r\n    return {\r\n      thisBlog: arr[ arr.length - 1 - this.order() ],\r\n      table_14: [\r\n        {name: 'pointer', intro: '手（ie5 用的是 hand）'},\r\n        {name: 'crosshair', intro: '十字准心（切图的感觉）'},\r\n        {name: 'wait', intro: '等待/沙漏（一般为一块表或者一个沙漏，新版 windows 是蓝圈圈）'},\r\n        {name: 'help', intro: '帮助（一般为问号或者气球）'},\r\n        {name: 'no-drop', intro: '无法释放（chrome下是禁止的标志，和not-allowed一样）'},\r\n        {name: 'text', intro: '文字/编辑'},\r\n        {name: 'move', intro: '可移动对象'},\r\n        {name: 'n-resize', intro: '向上改变大小（北，north 上下箭头）'},\r\n        {name: 's-resize', intro: '向下改变大小（南，south 上下箭头）'},\r\n        {name: 'e-resize', intro: '向右改变大小（东，east 左右箭头）'},\r\n        {name: 'w-resize', intro: '向左改变大小（西，west 左右箭头）'},\r\n        {name: 'ne-resize', intro: '向上右改变大小（north east 右斜箭头）'},\r\n        {name: 'sw-resize', intro: '向下左改变大小（south west 右斜箭头）'},\r\n        {name: 'nw-resize', intro: '向上左改变大小（north west 左斜箭头）'},\r\n        {name: 'se-resize', intro: '向下右改变大小（south east 左斜箭头）'},\r\n        {name: 'auto', intro: '自动（浏览器设置一个游标，效果不确定）'},\r\n        {name: 'not-allowed', intro: '禁止'},\r\n        {name: 'progress', intro: '处理中（鼠标边上一个小沙漏，新版 windows 是蓝圈圈）'},\r\n        {name: 'default', intro: '系统默认（鼠标箭头）'},\r\n        {name: 'url(\"#\")', intro: '自定义（可用动画，文件格式必须是.cur或.ani），此项无效果展示'},\r\n        {name: 'none', intro: '无指针'}\r\n      ],\r\n      count_21: 0,\r\n      table_37: [\r\n        {name: 'false', type: 'boolean', value: '假值'},\r\n        {name: '0', type: 'number', value: '假值'},\r\n        {name: '\"\"（空字符串）', type: 'string', value: '假值'},\r\n        {name: 'null', type: 'object', value: '空值'},\r\n        {name: 'undefined', type: 'undefined', value: '空值'}\r\n      ],\r\n      table_42_1: [\r\n        {\r\n          name: '矩形',\r\n          tagName: 'rect',\r\n          child: [\r\n            {attr: 'x', intro: '矩形左上角的 x 位置'},\r\n            {attr: 'y', intro: '矩形左上角的 y 位置'},\r\n            {attr: 'rx', intro: 'x 方位的圆角半径'},\r\n            {attr: 'ry', intro: 'y 方位的圆角半径'},\r\n            {attr: 'width', intro: '矩形宽度'},\r\n            {attr: 'height', intro: '矩形高度'}\r\n          ]\r\n        },\r\n        {\r\n          name: '矩形',\r\n          tagName: 'rect',\r\n          child: [\r\n            {attr: 'x', intro: '矩形左上角的 x 位置'},\r\n            {attr: 'y', intro: '矩形左上角的 y 位置'},\r\n            {attr: 'rx', intro: 'x 方位的圆角半径'},\r\n            {attr: 'ry', intro: 'y 方位的圆角半径'},\r\n            {attr: 'width', intro: '矩形宽度'},\r\n            {attr: 'height', intro: '矩形高度'}\r\n          ]\r\n        },\r\n        {\r\n          name: '圆形',\r\n          tagName: 'circle',\r\n          child: [\r\n            {attr: 'r', intro: '圆的半径'},\r\n            {attr: 'cx', intro: '圆心的 x 位置'},\r\n            {attr: 'cy', intro: '圆心的 y 位置'}\r\n          ]\r\n        },\r\n        {\r\n          name: '椭圆',\r\n          tagName: 'ellipse',\r\n          child: [\r\n            {attr: 'rx', intro: '椭圆的 x 半径'},\r\n            {attr: 'ry', intro: '椭圆的 y 半径'},\r\n            {attr: 'cx', intro: '椭圆中心的 x 位置'},\r\n            {attr: 'cy', intro: '椭圆中心的 y 位置'}\r\n          ]\r\n        },\r\n        {\r\n          name: '椭圆',\r\n          tagName: 'ellipse',\r\n          child: [\r\n            {attr: 'rx', intro: '椭圆的 x 半径'},\r\n            {attr: 'ry', intro: '椭圆的 y 半径'},\r\n            {attr: 'cx', intro: '椭圆中心的 x 位置'},\r\n            {attr: 'cy', intro: '椭圆中心的 y 位置'}\r\n          ]\r\n        },\r\n        {\r\n          name: '线条',\r\n          tagName: 'line',\r\n          child: [\r\n            {attr: 'x1', intro: '起点的 x 位置'},\r\n            {attr: 'x2', intro: '终点的 x 位置'},\r\n            {attr: 'y1', intro: '起点的 y 位置'},\r\n            {attr: 'y2', intro: '终点的 y 位置'}\r\n          ]\r\n        },\r\n        {\r\n          name: '折线',\r\n          tagName: 'polyline',\r\n          child: [\r\n            {attr: 'points', intro: '每次都要有两个坐标点，由空格和逗号分隔，例如：points=\"60 110,50 20,11 22\" '}\r\n          ]\r\n        },\r\n        {\r\n          name: '多边形',\r\n          tagName: 'polygon',\r\n          child: [\r\n            {attr: 'points', intro: '与折线用法一样，区别是：多边形会自动回到第一个点连接'}\r\n          ]\r\n        },\r\n        {\r\n          name: '路径',\r\n          tagName: 'path',\r\n          child: [\r\n            {attr: 'd', intro: '点集数列（比较复杂，后面会展开介绍）'}\r\n          ]\r\n        }\r\n      ],\r\n      table_42_2: [\r\n        {directive: 'M', explain: '移动至', useage: '\"M10 10\"', intro: '将画笔移动到 (10,10) 的位置（并没有画线）'},\r\n        {directive: 'L', explain: '画至', useage: '\"L20 20\"', intro: '会在指定的位置和画笔位置之间画一条直线'},\r\n        {directive: 'H', explain: '绘制平行线', useage: '\"H 90\"', intro: '在 x 轴上移动距离画出垂直线'},\r\n        {directive: 'V', explain: '绘制垂直线', useage: '\"V 90\"', intro: '在 y 轴上移动距离画出平行线'},\r\n        {directive: 'M', explain: '移动至', useage: '\"M10 10\"', intro: '将画笔移动到(10,10)的位置（并没有画线'},\r\n        {directive: 'Z(z)', explain: '闭合路径命令', useage: '\"M10 10 H 90 V 90 H 10 z\"', intro: '闭合所指的路径'}\r\n      ],\r\n      table_42_3: [\r\n        {directive: 'C(c)', explain: '三次贝塞尔曲线', useage: '\"Cx1 y1,x2 y2,x y\"', intro: '1 是起点控制点，2 是终点控制点，x y 是曲线终点（曲线起点就是画笔位置，控制点类似于 ps 中的锚点）'},\r\n        {directive: 'S', explain: '复制一相同曲线（三次）', useage: '\"C20 20,40 20,50 10 S x2 y2,x y\"', intro: '如果S命令跟在一个 C 命令或者另一个 S 命令的后面，它的第一个控制点，就会被假设成前一个控制点的对称点。如果 S 命令单独使用，前面没有 C 命令或者另一个 S 命令，那么它的两个控制点就会被假设为同一个点（参数含义跟 C 命令差不多）'},\r\n        {directive: 'Q', explain: '二次贝塞尔曲线 \"Qx1 y1,x y\"', useage: '\"H 90\"', intro: '只有一个控制点 x1,y1 用来确定起点终点的斜率（通俗的讲，就是三点画出一个曲线）'},\r\n        {directive: 'T', explain: '复制一相同曲线（二次）', useage: '\"C20 20,40 20 Tx y\"', intro: '控制点会自动推断，只需定义曲线终点即可'},\r\n        {directive: 'Z(z)', explain: '闭合路径命令', useage: '\"M10 10 H 90 V 90 H 10 z\"', intro: '闭合所指的路径'}\r\n      ],\r\n      table_42_4: [\r\n        {directive: 'A', explain: '弧形命令', useage: '\"Arx ry x-axis-rotation large-arc-flag sweep-flag x y\"', intro: '弧形可视为圆形或椭圆形的一部分'}\r\n      ],\r\n      table_42_5: [\r\n        {name: 'fill', intro: '设置对象内部的颜色'},\r\n        {name: 'stroke', intro: '设置绘制对象的线条的颜色，可以用 css 颜色命名方案定义颜色（颜色英文名、rgb、十六进制、rgba）'},\r\n        {name: 'fill-opacity', intro: '控制填充色的不透明度'},\r\n        {name: 'stroke-opacity', intro: '控制描边的不透明度'},\r\n        {name: 'stroke-linecap', intro: '描边方式 属性值：butt（用直边结束线段，不会超出描边） square（会稍微超出描边，超出量由 stroke-width 控制） round（边框终点是圆角，也由 stroke-width 控制）'},\r\n        {name: 'stroke-width', intro: '描边宽度（以路径为中心线绘制的）'},\r\n        {name: 'stroke-linejoin', intro: '控制两条描边线段之间用什么方式连接 属性值：miter（尖角转折） round（圆角转折） bevel（斜接转折）'},\r\n        {name: 'stroke-dasharray', intro: '属性值：a,b,c（三个数字，必须用逗号隔开）第一个表示填色区域的长度，第二个表示非填色区域的长度，第三个表示填色区域长度'},\r\n        {name: 'stroke-miterlimit', intro: '定义什么情况下绘制或不绘制边框连接的 miter 效果'},\r\n        {name: 'stroke-dashoffset', intro: '定义虚线开始的位置'},\r\n        {name: 'fill-rule', intro: '定义如何给图形重叠的区域上色（不太清楚如何使用）'}\r\n      ],\r\n      table_45: [\r\n        {name: 'host', intro: '返回 url 的主机部分，如：www.xxxx.com （host包含端口号，如：www.xxxx.com:81）'},\r\n        {name: 'hostname', intro: '返回 www.xxxx.com (hostname不包含端口号，默认的80是不显示的）'},\r\n        {name: 'href', intro: '返回 url 字符串（在浏览器中就是完整的地址栏）'},\r\n        {name: 'pathname', intro: '返回 地址路径 如 www.xxxx.com/aaa/bb/c  得到 /aaa/bb/c'},\r\n        {name: 'protocol', intro: '返回 url 的协议部分 如 http:,ftp:,maito: 等等'},\r\n        {name: 'port', intro: '返回 url 的端口部分，如果采用默认的 80 端口，返回的是空字符而不是默认的 80'}\r\n      ],\r\n      table_62: [\r\n        {name: 'ajaxStart', type: '全局', intro: '开始的方法'},\r\n        {name: 'beforeSend', type: '局部', intro: '发送前的方法，可用于验证'},\r\n        {name: 'ajaxSend', type: '全局', intro: '发送时的方法'},\r\n        {name: 'success', type: '局部', intro: '成功后的回调'},\r\n        {name: 'ajaxSuccess', type: '全局', intro: '成功后的方法'},\r\n        {name: 'error', type: '局部', intro: '错误后的回调'},\r\n        {name: 'ajaxError', type: '全局', intro: '错误后的方法'},\r\n        {name: 'complete', type: '局部', intro: '完成后的回调，无论失败成功'},\r\n        {name: 'ajaxComplete', type: '全局', intro: '完成后的方法，无论失败成功'},\r\n        {name: 'ajaxStop', type: '全局', intro: '停止的方法'}\r\n      ],\r\n      table_66_1: [\r\n        {name: 'range', type: 'Array', def: '[]', intro: 'mode 为 selector 时，range 有效'},\r\n        {name: 'value', type: 'Number', def: '0', intro: 'mode 为 selector 时，是数字，表示选择了 range 中的第几个'},\r\n        {name: 'bindchange', type: 'Function（EventHandle）', def: '', intro: 'value 值改变后触发 change 事件，event.detail={value:value}'}\r\n      ],\r\n      table_66_2: [\r\n        {name: 'value', type: 'String', def: '', intro: '表示选中的时间，格式为 “hh:mm”'},\r\n        {name: 'start', type: 'String', def: '', intro: '表示有效时间范围的开始，格式为 “hh:mm”'},\r\n        {name: 'end', type: 'String', def: '', intro: '表示有效时间范围的结束，格式为 “hh:mm”'},\r\n        {name: 'bindchange', type: 'Function（EventHandle）', def: '', intro: 'value 值改变后触发 change 事件，event.detail={value:value}'}\r\n      ],\r\n      table_66_3: [\r\n        {name: 'value', type: 'String', def: '0', intro: '表示选中的日期，格式为 “yyyy-MM-dd”'},\r\n        {name: 'start', type: 'String', def: '', intro: '表示有效日期范围的开始，格式为 “yyyy-MM-dd”'},\r\n        {name: 'end', type: 'String', def: '', intro: '表示有效日期范围的结束，格式为 “yyyy-MM-dd”'},\r\n        {name: 'bindchange', type: 'Function（EventHandle）', def: '', intro: 'value 值改变后触发 change 事件，event.detail={value:value}'}\r\n      ],\r\n      val_76: 0,\r\n      table_90: [\r\n        {name: '2D-Position', intro: '允许通过拖曳移动绝对定位的对象'},\r\n        {name: 'AbsolutePosition', intro: '设定元素的 position 属性为“absolute”(绝对)'},\r\n        {name: 'BackColor', intro: '设置或获取当前选中区的背景颜色'},\r\n        {name: 'BlockDirLTR', intro: '目前尚未支持'},\r\n        {name: 'BlockDirRTL', intro: '目前尚未支持'},\r\n        {name: 'Bold', intro: '切换当前选中区的粗体显示与否'},\r\n        {name: 'BrowseMode', intro: '目前尚未支持'},\r\n        {name: 'Copy', intro: '将当前选中区复制到剪贴板'},\r\n        {name: 'CreateBookmark', intro: '创建一个书签锚或获取当前选中区或插入点的书签锚的名称'},\r\n        {name: 'CreateLink', intro: '在当前选中区上插入超级链接，或显示一个对话框允许用户指定要为当前选中区插入的超级链接的 URL'},\r\n        {name: 'Cut', intro: '将当前选中区删除并复制到剪贴板'},\r\n        {name: 'Delete', intro: '删除当前选中区'},\r\n        {name: 'DirLTR', intro: '目前尚未支持'},\r\n        {name: 'DirRTL', intro: '目前尚未支持'},\r\n        {name: 'EditMode', intro: '目前尚未支持'},\r\n        {name: 'FontName', intro: '设置或获取当前选中区的字体'},\r\n        {name: 'FontSize', intro: '设置或获取当前选中区的字体大小'},\r\n        {name: 'ForeColor', intro: '设置或获取当前选中区的前景(文本)颜色'},\r\n        {name: 'FormatBlock', intro: '设置当前块格式化标签'},\r\n        {name: 'Indent', intro: '增加选中文本的缩进'},\r\n        {name: 'InlineDirLTR', intro: '目前尚未支持'},\r\n        {name: 'InlineDirRTL', intro: '目前尚未支持。'},\r\n        {name: 'InsertButton', intro: '用按钮控件覆盖当前选中区'},\r\n        {name: 'InsertFieldset', intro: '用方框覆盖当前选中区'},\r\n        {name: 'InsertHorizontalRule', intro: '用水平线覆盖当前选中区'},\r\n        {name: 'InsertIFrame', intro: '用内嵌框架覆盖当前选中区'},\r\n        {name: 'InsertImage', intro: '用图像覆盖当前选中区'},\r\n        {name: 'InsertInputButton', intro: '用按钮控件覆盖当前选中区。'},\r\n        {name: 'InsertInputCheckbox', intro: '用复选框控件覆盖当前选中区'},\r\n        {name: 'InsertInputFileUpload', intro: '用文件上载控件覆盖当前选中区'},\r\n        {name: 'InsertInputHidden', intro: '插入隐藏控件覆盖当前选中区'},\r\n        {name: 'InsertInputImage', intro: '用图像控件覆盖当前选中区'},\r\n        {name: 'InsertInputPassword', intro: '用密码控件覆盖当前选中区'},\r\n        {name: 'InsertInputRadio', intro: '用单选钮控件覆盖当前选中区'},\r\n        {name: 'InsertInputReset', intro: '用重置控件覆盖当前选中区'},\r\n        {name: 'InsertInputSubmit', intro: '用提交控件覆盖当前选中区'},\r\n        {name: 'InsertInputText', intro: '用文本控件覆盖当前选中区'},\r\n        {name: 'InsertMarquee', intro: '用空字幕覆盖当前选中区'},\r\n        {name: 'InsertOrderedList', intro: '切换当前选中区是编号列表还是常规格式化块'},\r\n        {name: 'InsertParagraph', intro: '用换行覆盖当前选中区'},\r\n        {name: 'InsertSelectDropdown', intro: '用下拉框控件覆盖当前选中区'},\r\n        {name: 'InsertSelectListbox', intro: '用列表框控件覆盖当前选中区'},\r\n        {name: 'InsertTextArea', intro: '用多行文本输入控件覆盖当前选中区'},\r\n        {name: 'InsertUnorderedList', intro: '切换当前选中区是项目符号列表还是常规格式化块'},\r\n        {name: 'Italic', intro: '切换当前选中区斜体显示与否'},\r\n        {name: 'JustifyCenter', intro: '将当前选中区在所在格式化块置中。'},\r\n        {name: 'JustifyFull', intro: '目前尚未支持。'},\r\n        {name: 'JustifyLeft', intro: '将当前选中区所在格式化块左对齐'},\r\n        {name: 'JustifyNone', intro: '目前尚未支持'},\r\n        {name: 'JustifyRight', intro: '将当前选中区所在格式化块右对齐'},\r\n        {name: 'LiveResize', intro: '迫使 MSHTML 编辑器在缩放或移动过程中持续更新元素外观，而不是只在移动或缩放完成后更新'},\r\n        {name: 'MultipleSelection', intro: '允许当用户按住 Shift 或 Ctrl 键时一次选中多于一个站点可选元素'},\r\n        {name: 'Open', intro: '打开'},\r\n        {name: 'Outdent', intro: '减少选中区所在格式化块的缩进'},\r\n        {name: 'OverWrite', intro: '切换文本状态的插入和覆盖'},\r\n        {name: 'Paste', intro: '用剪贴板内容覆盖当前选中区'},\r\n        {name: 'PlayImage', intro: '目前尚未支持'},\r\n        {name: 'Print', intro: '打开打印对话框以便用户可以打印当前页'},\r\n        {name: 'Redo', intro: '重做'},\r\n        {name: 'Refresh', intro: '刷新当前文档'},\r\n        {name: 'RemoveFormat', intro: '从当前选中区中删除格式化标签'},\r\n        {name: 'RemoveParaFormat', intro: '目前尚未支持'},\r\n        {name: 'SaveAs', intro: '将当前 Web 页面保存为文件'},\r\n        {name: 'SelectAll', intro: '选中整个文档'},\r\n        {name: 'SizeToControl', intro: '目前尚未支持'},\r\n        {name: 'SizeToControlHeight', intro: '目前尚未支持'},\r\n        {name: 'SizeToControlWidth', intro: '目前尚未支持'},\r\n        {name: 'Stop', intro: '停止'},\r\n        {name: 'StopImage', intro: '目前尚未支持'},\r\n        {name: 'StrikeThrough', intro: '目前尚未支持'},\r\n        {name: 'Subscript', intro: '目前尚未支持。'},\r\n        {name: 'Superscript', intro: '目前尚未支持。'},\r\n        {name: 'UnBookmark', intro: '从当前选中区中删除全部书签'},\r\n        {name: 'Underline', intro: '切换当前选中区的下划线显示与否'},\r\n        {name: 'Undo', intro: '撤消'},\r\n        {name: 'Unlink', intro: '从当前选中区中删除全部超级链接'},\r\n        {name: 'Unselect', intro: '清除当前选中区的选中状态'}\r\n      ],\r\n      name_93: '',\r\n      popover_93: [\r\n        {no: '001', name: '张三', age: '18', state: false},\r\n        {no: '002', name: '李四', age: '18', state: false},\r\n        {no: '003', name: '王五', age: '18', state: false},\r\n        {no: '004', name: '赵钱孙李', age: '18', state: false}\r\n      ],\r\n      table_98: [\r\n        {name: 'Ctrl+C', intro: '终止当前命令的快捷键，可以跳入下一行'},\r\n        {name: 'Tab', intro: '命令打到一半的时候会自动补全，甚至目录也能补全'},\r\n        {name: 'Ctrl+D', intro: '退出当前终端，和 exit 效果相同'},\r\n        {name: 'Ctrl+Z', intro: '暂停当前进程，正在运行的命令，如果觉得有问题可以暂停它'},\r\n        {name: 'Ctrl+L', intro: '清屏'},\r\n        {name: 'man', intro: '查看帮助（例如 man ls）'},\r\n        {name: 'fg', intro: '将后台命令调至前台继续运行'},\r\n        {name: 'bg', intro: '将一个在后台暂停的命令，变成继续执行'},\r\n        {name: 'jobs', intro: '查看当前有多少后台运行的命令'},\r\n        {name: 'mkdir', intro: '创建一个目录'},\r\n        {name: 'rmdir', intro: '删除一个目录（不能删不为空的）'},\r\n        {name: 'rm', intro: '删除目录或文件'}\r\n      ],\r\n      table_104: [\r\n        {name: '<span class=\"code\">get(target,propKey,receive)</span>', intro: '拦截对象属性的读取。'},\r\n        {name: '<span class=\"code\">set(target,propKey,value,receive)</span>', intro: '拦截对象属性的设置，返回一个布尔值。'},\r\n        {name: '<span class=\"code\">has(target, propKey)</span>', intro: '拦截 <span class=\"code\">propKey in proxy</span> 的操作，返回一个布尔值。'},\r\n        {name: '<span class=\"code\">deleteProperty(target, propKey)</span>', intro: '拦截 <span class=\"code\">delete proxy[propKey]</span> 的操作，返回一个布尔值。'},\r\n        {name: '<span class=\"code\">ownKeys(target)</span>', intro: '拦截 <span class=\"code\">Object.getOwnPropertyNames(proxy)</span>、<span class=\"code\">Object.getOwnPropertySymbols(proxy)</span>、<span class=\"code\">Object.keys(proxy)</span>，返回一个数组。'},\r\n        {name: '<span class=\"code\">getOwnPropertyDescriptor(target, propKey)</span>', intro: '拦截 <span class=\"code\">Object.getOwnPropertyDescriptor(proxy, propKey)</span>，返回属性的描述对象。'},\r\n        {name: '<span class=\"code\">defineProperty(target, propKey, propDesc)</span>', intro: '拦截 <span class=\"code\">Object.defineProperty(proxy, propKey, propDesc)</span>、<span class=\"code\">Object.defineProperties(proxy, propDescs)</span>，返回一个布尔值。'},\r\n        {name: '<span class=\"code\">preventExtensions(target)</span>', intro: '拦截 <span class=\"code\">Object.preventExtensions(proxy)</span>，返回一个布尔值。'},\r\n        {name: '<span class=\"code\">getPrototypeOf(target)</span>', intro: '拦截 <span class=\"code\">Object.getPrototypeOf(proxy)</span>，返回一个对象。'},\r\n        {name: '<span class=\"code\">isExtensible(target)</span>', intro: '拦截<span class=\"code\">Object.isExtensible(proxy)</span>，返回一个布尔值。'},\r\n        {name: '<span class=\"code\">setPrototypeOf(target, proto)</span>', intro: '拦截 <span class=\"code\">Object.setPrototypeOf(proxy, proto)</span>，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。'},\r\n        {name: '<span class=\"code\">apply(target, object, args)</span>', intro: '拦截 <span class=\"code\">Proxy</span> 实例作为函数调用的操作，比如 <span class=\"code\">proxy(...args)、proxy.call(object, ...args)</span>、<span class=\"code\">proxy.apply(...)</span>。'},\r\n        {name: '<span class=\"code\">construct(target, args)</span>', intro: '拦截 <span class=\"code\">Proxy</span> 实例作为构造函数调用的操作，比如 <span class=\"code\">new proxy(...args)</span>。'}\r\n      ]\r\n    };\r\n  },\r\n  methods: {\r\n    order () {\r\n      return (window.location.href.substring(window.location.href.indexOf('_') + 1) - 1);\r\n    },\r\n    tableRowClass_14 (row) {\r\n      return row.row.name;\r\n    },\r\n    input_76 (num) {\r\n      if (num === null) return '0';\r\n      if (num === '') return '0';\r\n      let _num;\r\n      if (typeof num === 'string') {\r\n        _num = parseInt(num);\r\n      } else {\r\n        _num = num;\r\n      }\r\n      if (_num < 0) return 0;\r\n      else if (_num < 9999) return _num;\r\n      else if (_num < 99999999) return Math.round(_num / 10000 * 100) / 100 + '万';\r\n      else if (_num < 999999999999) return Math.round(_num / 100000000 * 100) / 100 + '亿';\r\n      else if (_num < 9999999999999999) return Math.round(_num / 100000000 * 100) / 100 + '万亿';\r\n      else if (_num < 99999999999999999999) return Math.round(_num / 100000000 * 100) / 100 + '亿亿';\r\n      else return '太多了，不玩了';\r\n    },\r\n    click_93 (name) {\r\n      this.name_93 = name;\r\n    },\r\n    del_93 () {\r\n      this.popover_93.forEach((e, i) => {\r\n        if (e.name === this.name_93) {\r\n          this.popover_93.splice(i, 1);\r\n        }\r\n      });\r\n    }\r\n  },\r\n  mounted () {\r\n    document.documentElement.scrollTop = document.body.scrollTop = 0;\r\n    if (location.hash.includes('blog_')) document.title = this.thisBlog.title + ' - 龙';\r\n  }\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/assets/js/blog.js","<template>\r\n    <div class=\"blog\">\r\n        <header>\r\n            <p class=\"title\">{{thisBlog.title}}</p>\r\n            <p class=\"time\">\r\n                {{thisBlog.time}}\r\n                <el-tag v-for=\"tags in thisBlog.tags\" :key=\"tags.name\" :type=\"tags.type\">{{tags.name}}</el-tag>\r\n            </p>\r\n        </header>\r\n        <section>\r\n            <p class=\"subtitle\">前言</p>\r\n            <p v-html=\"thisBlog.brief\">{{thisBlog.brief}}</p>\r\n            <p class=\"subtitle\">正文</p>\r\n            <p class=\"minititle\">一、原理</p>\r\n            <p>\r\n                首先看一个例子：\r\n            </p>\r\n            <pre class=\"code\"><span class=\"key\">var </span><span class=\"param\">s1</span><span class=\"key\"> = </span><span class=\"str\">'new string'</span><span class=\"word\">;</span><br><span class=\"key\">var </span><span class=\"param\">s2</span><span class=\"key\"> = </span><span class=\"param\">s1</span><span class=\"word\">.</span><span class=\"method\">substring</span><span class=\"word\">(2);</span></pre>\r\n            <p>\r\n                基本类型值不是对象，从逻辑上讲不应该有方法（实际是有的）。为了实现这种直观的操作，后台自动完成的一系列的处理，第二行代码访问 <span class=\"code\">s1</span> 的时候，访问过程处于一种读取模式，也就是从内存中读取这个字符串的值。在读取过程中，后台自动完成了下列处理：\r\n            </p>\r\n            <p>\r\n                1、创建 <span class=\"code\">String</span> 类型的一个实例；\r\n            </p>\r\n            <p>\r\n                2、在实例上调用指定的方法；\r\n            </p>\r\n            <p>\r\n                3、销毁这个实例。\r\n            </p>\r\n            <p>\r\n                这三步操作相当于（经过这样的处理，就把基本的类型转化为了对象。也同样适用于 <span class=\"code\">Boolean</span> 和 <span class=\"code\">Number</span>）：\r\n            </p>\r\n            <pre class=\"code\"><span class=\"key\">var </span><span class=\"param\">s1</span><span class=\"key\"> = </span><span class=\"key\">new </span><span class=\"fun\">String</span><span class=\"word\">(</span><span class=\"str\">'new string'</span><span class=\"word\">);</span><br><span class=\"key\">var </span><span class=\"param\">s2</span><span class=\"key\"> = </span><span class=\"param\">s1</span><span class=\"word\">.</span><span class=\"method\">substring</span><span class=\"word\">(2);</span><br><span class=\"param\">s1</span><span class=\"key\"> = null</span><span class=\"word\">;</span></pre>\r\n            <p>\r\n                引用类型和基本包装类型的主要区别就是对象的生存期。使用 <span class=\"code\">New</span> 操作符创建的引用类型的实例，在执行流离开当前作用域之前都保存在内存中，而自动创建的基本包装类型的对象，只存在于执行代码的瞬间，之后就会被销毁。也就是说，不能在运行时为基本类型添加属性和方法。\r\n            </p>\r\n            <p class=\"minititle\">二、Object 构造函数</p>\r\n            <p>\r\n                <span class=\"code\">Object</span> 构造函数会像工厂方法一样，根据传入值的类型返回相应包装类型的实例。例如：\r\n            </p>\r\n            <pre class=\"code\"><span class=\"key\">var </span><span class=\"param\">obj</span><span class=\"key\"> = </span><span class=\"key\">new </span><span class=\"method\">Object</span><span class=\"word\">(</span><span class=\"str\">'some text'</span><span class=\"word\">);</span><br><span class=\"spe\">console</span><span class=\"word\">.</span><span class=\"spe\">log</span><span class=\"word\">(</span><span class=\"param\">obj</span><span class=\"key\"> instanceof </span><span class=\"method\">String</span><span class=\"word\">);</span><span class=\"com\"> // true</span></pre>\r\n            <p>\r\n                上例中，将字符串传给 <span class=\"code\">Object</span> 构造函数，就创建了 <span class=\"code\">String</span> 的实例（传入什么类型就会得到什么类型的实例）。而直接调用转型函数不同。例如： <span class=\"code\"> console.log( typeof Number('25') )</span>（结果是 <span class=\"code\">Number</span> 类型）。如果是特定类型的构造函数则是：<span class=\"code\"> console.log( typeof new Number('25') )</span>（结果是 <span class=\"code\">Object</span> 类型，保存的是 <span class=\"code\">Number</span> 的实例对象）。\r\n            </p>\r\n            <p class=\"minititle\">三、Boolean 类型</p>\r\n            <p>\r\n                <span class=\"code\">Boolean</span> 对象在 ECMAScript 中用处不大，而且会造成误解。例如：\r\n            </p>\r\n            <pre class=\"code\"><span class=\"key\">var </span><span class=\"param\">fObject</span><span class=\"key\"> = new </span><span class=\"method\">Boolean</span><span class=\"word\">(</span><span class=\"key\">false</span><span class=\"word\">);</span><br><span class=\"key\">var </span><span class=\"param\">fValue</span><span class=\"key\"> = </span><span class=\"key\">false</span><span class=\"word\">;</span><br><span class=\"spe\">console</span><span class=\"word\">.</span><span class=\"spe\">log</span><span class=\"word\">(</span><span class=\"param\">fObject</span><span class=\"key\"> && true</span><span class=\"word\">);</span><span class=\"com\"> // true</span><br><span class=\"spe\">console</span><span class=\"word\">.</span><span class=\"spe\">log</span><span class=\"word\">(</span><span class=\"param\">fValue</span><span class=\"key\"> && true</span><span class=\"word\">);</span><span class=\"com\"> // false</span></pre>\r\n            <p>\r\n                因为第一个是作为对象（<span class=\"code\">Object</span>）去判断的，所以会被认为是 <span class=\"code\">true</span>，而后面的 <span class=\"code\">fValue</span> 才是真正的 <span class=\"code\">false</span>。只要能理解它们的区别就好了，不建议使用 <span class=\"code\">Boolean</span> 对象。\r\n            </p>\r\n            <p class=\"minititle\">四、Number 类型</p>\r\n            <p>\r\n                与 <span class=\"code\">Boolean</span> 类型一样，<span class=\"code\">Number</span> 也重写了 <span class=\"code\">valueOf()</span>、<span class=\"code\">toLocaleString()</span>、<span class=\"code\">toString()</span> 方法。\r\n            </p>\r\n            <p>\r\n                <span class=\"code\">valueOf()</span> 返回对象表示的基本类型的数值，另外两个方法返回字符串形式的数值。<span class=\"code\">toString()</span> 还能返回数值的字符串形式，例如：\r\n            </p>\r\n            <pre class=\"code\"><span class=\"key\">var </span><span class=\"param\">num</span><span class=\"key\"> = </span><span class=\"word\">10;</span><br><span class=\"param\">num</span><span class=\"word\">.</span><span class=\"method\">toString</span><span class=\"word\">();</span><span class=\"com\">&nbsp;// '10' </span><br><span class=\"param\">num</span><span class=\"word\">.</span><span class=\"method\">toString</span><span class=\"word\">(2);</span><span class=\"com\">&nbsp;// '2' </span><br><span class=\"param\">num</span><span class=\"word\">.</span><span class=\"method\">toString</span><span class=\"word\">(8);</span><span class=\"com\">&nbsp;// '8' </span><br><span class=\"param\">num</span><span class=\"word\">.</span><span class=\"method\">toString</span><span class=\"word\">(10);</span><span class=\"com\">&nbsp;// '10' </span><br><span class=\"param\">num</span><span class=\"word\">.</span><span class=\"method\">toString</span><span class=\"word\">(16);</span><span class=\"com\">&nbsp;// 'a' </span><br></pre>\r\n            <p>\r\n                <span class=\"code\">toFixed()</span> 方法有四舍五入的功能，很适合用于处理货币，在 IE8 及更早的版本不能正确识别 <span class=\"code\">{(-0.94, -0.5),(0.5, 0.94)}</span> 区间内的值（统一返回 0 ，而不是 -1 或 1）。IE9 修复了这个问题。<span class=\"code\">toFixed()</span> 方法的标准是可以保留到 20 位，但有些浏览器可能会支持更多位数。\r\n            </p>\r\n            <p>\r\n                <span class=\"code\">toExponential()</span> 方法是将数值转换为科学计数法，如 <span class=\"code\">(12).toExponential()</span> 得到的结果是  <span class=\"code\">1.2e+1</span>。但是这个方法将所有值都转化为科学计数法，如 <span class=\"code\">12</span> 这样的小数字没有必要转为科学计数法。这时候不需要使用 <span class=\"code\">if</span> 判断，因为还有 <span class=\"code\">toPrecision()</span> 方法下面介绍一下这种方法。\r\n            </p>\r\n            <p>\r\n                <span class=\"code\">toPrecision()</span> 会根据传入的参数去识别保留位数，还是转为科学计数法。如：\r\n            </p>\r\n            <pre class=\"code\"><span class=\"word\">(12).</span><span class=\"method\">toPrecision</span><span class=\"word\">(3);</span><span class=\"com\">&nbsp;// '12.0'</span><br><span class=\"word\">(120).</span><span class=\"method\">toPrecision</span><span class=\"word\">(3);</span><span class=\"com\">&nbsp;// '120'</span><br><span class=\"word\">(1200).</span><span class=\"method\">toPrecision</span><span class=\"word\">(3);</span><span class=\"com\">&nbsp;// '1.20e+3'</span></pre>\r\n            <p>\r\n                与 <span class=\"code\">Boolean</span> 一样，使用 <span class=\"code\">new Number()</span> 创建的数组类型是 <span class=\"code\">“object”</span>。\r\n            </p>\r\n            <p class=\"minititle\">五、String 类型</p>\r\n            <p>\r\n                有两个用于访问字符串中特定字符的方法。<span class=\"code\">charAt()</span>：用于返回指定下标位置的字符；<span class=\"code\">charCodeAt()</span>：用于范围指定下标位置的字符编码。\r\n            </p>\r\n            <p>\r\n                <span class=\"code\">concat()</span> 是字符串拼接方法。使用示例（实际使用中一般直接使用 <span class=\"code\">+</span> 拼接）：\r\n            </p>\r\n            <pre class=\"code\"><span class=\"key\">var </span><span class=\"param\">str</span><span class=\"key\"> = </span><span class=\"str\">'Hello,'</span><span class=\"word\">;</span><br><span class=\"spe\">console</span><span class=\"word\">.</span><span class=\"spe\">log</span><span class=\"word\">(</span><span class=\"param\">str</span><span class=\"word\">.</span><span class=\"method\">concat</span><span class=\"word\">(</span><span class=\"str\">'world'</span><span class=\"word\">,</span><span class=\"str\">'!'</span><span class=\"word\">));</span><span class=\"com\"> // Hello,world!  可以传多个参数</span></pre>\r\n            <p>\r\n                基于子字符串的创建方法：<span class=\"code\">slice()</span>、<span class=\"code\">substr()</span>、<span class=\"code\">substring()</span>。这里不展开介绍这几个方法了。\r\n            </p>\r\n            <p>\r\n                字符串的位置方法：<span class=\"code\">indexOf()</span>、<span class=\"code\">lastIndexOf()</span>。这两个方法也不展开介绍。\r\n            </p>\r\n            <p>\r\n                <span class=\"tip\">ES5</span> 还提供了删除字符串首尾空格的方法：<span class=\"code\">trim()</span>。这个方法会创建一个副本（即不改变原字符串）将前置及后缀的空格删除并返回。支持这个方法的浏览器有：IE 9+、Firefox 3.5+、Safari 5+、Chrome 8+。此外 Chrome 8+ 还支持非标准的 <span class=\"code\">trimLeft()</span> 和 <span class=\"code\">trimRight()</span>，分别用于删除字符串开头或结尾的空格。\r\n            </p>\r\n            <p>\r\n                字符串大小写转换的方法：<span class=\"code\">toLowerCase()</span>、<span class=\"code\">toLocaleLowerCase()</span>、<span class=\"code\">toUpperCase()</span>、<span class=\"code\">toLocaleUpperCase()</span>。不展开介绍这些方法，<span class=\"code\">Locale</span> 是针对某些特殊地区的语言的实现，对于非特殊的语言使用哪一个结果是一样的。如果不知道运行的语言环境使用 <span class=\"code\">Locale</span> 对更加稳妥。\r\n            </p>\r\n        </section>\r\n    </div>\r\n</template>\r\n<script>\r\nimport blog from './../../../assets/js/blog'\r\nexport default{\r\n  ...blog\r\n}\r\n</script>\r\n\n\n\n// WEBPACK FOOTER //\n// blog_107.vue?5580fa5c","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"blog\"\n  }, [_c('header', [_c('p', {\n    staticClass: \"title\"\n  }, [_vm._v(_vm._s(_vm.thisBlog.title))]), _vm._v(\" \"), _c('p', {\n    staticClass: \"time\"\n  }, [_vm._v(\"\\n            \" + _vm._s(_vm.thisBlog.time) + \"\\n            \"), _vm._l((_vm.thisBlog.tags), function(tags) {\n    return _c('el-tag', {\n      key: tags.name,\n      attrs: {\n        \"type\": tags.type\n      }\n    }, [_vm._v(_vm._s(tags.name))])\n  })], 2)]), _vm._v(\" \"), _c('section', [_c('p', {\n    staticClass: \"subtitle\"\n  }, [_vm._v(\"前言\")]), _vm._v(\" \"), _c('p', {\n    domProps: {\n      \"innerHTML\": _vm._s(_vm.thisBlog.brief)\n    }\n  }, [_vm._v(_vm._s(_vm.thisBlog.brief))]), _vm._v(\" \"), _c('p', {\n    staticClass: \"subtitle\"\n  }, [_vm._v(\"正文\")]), _vm._v(\" \"), _c('p', {\n    staticClass: \"minititle\"\n  }, [_vm._v(\"一、原理\")]), _vm._v(\" \"), _c('p', [_vm._v(\"\\n            首先看一个例子：\\n        \")]), _vm._v(\" \"), _vm._m(0), _vm._v(\" \"), _vm._m(1), _vm._v(\" \"), _vm._m(2), _vm._v(\" \"), _c('p', [_vm._v(\"\\n            2、在实例上调用指定的方法；\\n        \")]), _vm._v(\" \"), _c('p', [_vm._v(\"\\n            3、销毁这个实例。\\n        \")]), _vm._v(\" \"), _vm._m(3), _vm._v(\" \"), _vm._m(4), _vm._v(\" \"), _vm._m(5), _vm._v(\" \"), _c('p', {\n    staticClass: \"minititle\"\n  }, [_vm._v(\"二、Object 构造函数\")]), _vm._v(\" \"), _vm._m(6), _vm._v(\" \"), _vm._m(7), _vm._v(\" \"), _vm._m(8), _vm._v(\" \"), _c('p', {\n    staticClass: \"minititle\"\n  }, [_vm._v(\"三、Boolean 类型\")]), _vm._v(\" \"), _vm._m(9), _vm._v(\" \"), _vm._m(10), _vm._v(\" \"), _vm._m(11), _vm._v(\" \"), _c('p', {\n    staticClass: \"minititle\"\n  }, [_vm._v(\"四、Number 类型\")]), _vm._v(\" \"), _vm._m(12), _vm._v(\" \"), _vm._m(13), _vm._v(\" \"), _vm._m(14), _vm._v(\" \"), _vm._m(15), _vm._v(\" \"), _vm._m(16), _vm._v(\" \"), _vm._m(17), _vm._v(\" \"), _vm._m(18), _vm._v(\" \"), _vm._m(19), _vm._v(\" \"), _c('p', {\n    staticClass: \"minititle\"\n  }, [_vm._v(\"五、String 类型\")]), _vm._v(\" \"), _vm._m(20), _vm._v(\" \"), _vm._m(21), _vm._v(\" \"), _vm._m(22), _vm._v(\" \"), _vm._m(23), _vm._v(\" \"), _vm._m(24), _vm._v(\" \"), _vm._m(25), _vm._v(\" \"), _vm._m(26)])])\n},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    staticClass: \"code\"\n  }, [_c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"var \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"s1\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" = \")]), _c('span', {\n    staticClass: \"str\"\n  }, [_vm._v(\"'new string'\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\";\")]), _c('br'), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"var \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"s2\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" = \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"s1\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"substring\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(2);\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            基本类型值不是对象，从逻辑上讲不应该有方法（实际是有的）。为了实现这种直观的操作，后台自动完成的一系列的处理，第二行代码访问 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"s1\")]), _vm._v(\" 的时候，访问过程处于一种读取模式，也就是从内存中读取这个字符串的值。在读取过程中，后台自动完成了下列处理：\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            1、创建 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"String\")]), _vm._v(\" 类型的一个实例；\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            这三步操作相当于（经过这样的处理，就把基本的类型转化为了对象。也同样适用于 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Boolean\")]), _vm._v(\" 和 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Number\")]), _vm._v(\"）：\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    staticClass: \"code\"\n  }, [_c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"var \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"s1\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" = \")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"new \")]), _c('span', {\n    staticClass: \"fun\"\n  }, [_vm._v(\"String\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(\")]), _c('span', {\n    staticClass: \"str\"\n  }, [_vm._v(\"'new string'\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\");\")]), _c('br'), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"var \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"s2\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" = \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"s1\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"substring\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(2);\")]), _c('br'), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"s1\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" = null\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\";\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            引用类型和基本包装类型的主要区别就是对象的生存期。使用 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"New\")]), _vm._v(\" 操作符创建的引用类型的实例，在执行流离开当前作用域之前都保存在内存中，而自动创建的基本包装类型的对象，只存在于执行代码的瞬间，之后就会被销毁。也就是说，不能在运行时为基本类型添加属性和方法。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Object\")]), _vm._v(\" 构造函数会像工厂方法一样，根据传入值的类型返回相应包装类型的实例。例如：\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    staticClass: \"code\"\n  }, [_c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"var \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"obj\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" = \")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"new \")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"Object\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(\")]), _c('span', {\n    staticClass: \"str\"\n  }, [_vm._v(\"'some text'\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\");\")]), _c('br'), _c('span', {\n    staticClass: \"spe\"\n  }, [_vm._v(\"console\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"spe\"\n  }, [_vm._v(\"log\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(\")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"obj\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" instanceof \")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"String\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\");\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // true\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            上例中，将字符串传给 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Object\")]), _vm._v(\" 构造函数，就创建了 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"String\")]), _vm._v(\" 的实例（传入什么类型就会得到什么类型的实例）。而直接调用转型函数不同。例如： \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\" console.log( typeof Number('25') )\")]), _vm._v(\"（结果是 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Number\")]), _vm._v(\" 类型）。如果是特定类型的构造函数则是：\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\" console.log( typeof new Number('25') )\")]), _vm._v(\"（结果是 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Object\")]), _vm._v(\" 类型，保存的是 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Number\")]), _vm._v(\" 的实例对象）。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Boolean\")]), _vm._v(\" 对象在 ECMAScript 中用处不大，而且会造成误解。例如：\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    staticClass: \"code\"\n  }, [_c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"var \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"fObject\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" = new \")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"Boolean\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"false\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\");\")]), _c('br'), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"var \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"fValue\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" = \")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"false\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\";\")]), _c('br'), _c('span', {\n    staticClass: \"spe\"\n  }, [_vm._v(\"console\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"spe\"\n  }, [_vm._v(\"log\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(\")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"fObject\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" && true\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\");\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // true\")]), _c('br'), _c('span', {\n    staticClass: \"spe\"\n  }, [_vm._v(\"console\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"spe\"\n  }, [_vm._v(\"log\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(\")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"fValue\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" && true\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\");\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // false\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            因为第一个是作为对象（\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Object\")]), _vm._v(\"）去判断的，所以会被认为是 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"true\")]), _vm._v(\"，而后面的 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"fValue\")]), _vm._v(\" 才是真正的 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"false\")]), _vm._v(\"。只要能理解它们的区别就好了，不建议使用 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Boolean\")]), _vm._v(\" 对象。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            与 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Boolean\")]), _vm._v(\" 类型一样，\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Number\")]), _vm._v(\" 也重写了 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"valueOf()\")]), _vm._v(\"、\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toLocaleString()\")]), _vm._v(\"、\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toString()\")]), _vm._v(\" 方法。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"valueOf()\")]), _vm._v(\" 返回对象表示的基本类型的数值，另外两个方法返回字符串形式的数值。\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toString()\")]), _vm._v(\" 还能返回数值的字符串形式，例如：\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    staticClass: \"code\"\n  }, [_c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"var \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"num\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" = \")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"10;\")]), _c('br'), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"num\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"toString\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"();\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // '10' \")]), _c('br'), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"num\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"toString\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(2);\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // '2' \")]), _c('br'), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"num\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"toString\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(8);\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // '8' \")]), _c('br'), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"num\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"toString\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(10);\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // '10' \")]), _c('br'), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"num\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"toString\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(16);\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // 'a' \")]), _c('br')])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toFixed()\")]), _vm._v(\" 方法有四舍五入的功能，很适合用于处理货币，在 IE8 及更早的版本不能正确识别 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"{(-0.94, -0.5),(0.5, 0.94)}\")]), _vm._v(\" 区间内的值（统一返回 0 ，而不是 -1 或 1）。IE9 修复了这个问题。\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toFixed()\")]), _vm._v(\" 方法的标准是可以保留到 20 位，但有些浏览器可能会支持更多位数。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toExponential()\")]), _vm._v(\" 方法是将数值转换为科学计数法，如 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"(12).toExponential()\")]), _vm._v(\" 得到的结果是  \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"1.2e+1\")]), _vm._v(\"。但是这个方法将所有值都转化为科学计数法，如 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"12\")]), _vm._v(\" 这样的小数字没有必要转为科学计数法。这时候不需要使用 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"if\")]), _vm._v(\" 判断，因为还有 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toPrecision()\")]), _vm._v(\" 方法下面介绍一下这种方法。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toPrecision()\")]), _vm._v(\" 会根据传入的参数去识别保留位数，还是转为科学计数法。如：\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    staticClass: \"code\"\n  }, [_c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(12).\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"toPrecision\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(3);\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // '12.0'\")]), _c('br'), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(120).\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"toPrecision\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(3);\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // '120'\")]), _c('br'), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(1200).\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"toPrecision\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(3);\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // '1.20e+3'\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            与 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Boolean\")]), _vm._v(\" 一样，使用 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"new Number()\")]), _vm._v(\" 创建的数组类型是 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"“object”\")]), _vm._v(\"。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            有两个用于访问字符串中特定字符的方法。\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"charAt()\")]), _vm._v(\"：用于返回指定下标位置的字符；\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"charCodeAt()\")]), _vm._v(\"：用于范围指定下标位置的字符编码。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"concat()\")]), _vm._v(\" 是字符串拼接方法。使用示例（实际使用中一般直接使用 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"+\")]), _vm._v(\" 拼接）：\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('pre', {\n    staticClass: \"code\"\n  }, [_c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\"var \")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"str\")]), _c('span', {\n    staticClass: \"key\"\n  }, [_vm._v(\" = \")]), _c('span', {\n    staticClass: \"str\"\n  }, [_vm._v(\"'Hello,'\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\";\")]), _c('br'), _c('span', {\n    staticClass: \"spe\"\n  }, [_vm._v(\"console\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"spe\"\n  }, [_vm._v(\"log\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(\")]), _c('span', {\n    staticClass: \"param\"\n  }, [_vm._v(\"str\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\".\")]), _c('span', {\n    staticClass: \"method\"\n  }, [_vm._v(\"concat\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"(\")]), _c('span', {\n    staticClass: \"str\"\n  }, [_vm._v(\"'world'\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\",\")]), _c('span', {\n    staticClass: \"str\"\n  }, [_vm._v(\"'!'\")]), _c('span', {\n    staticClass: \"word\"\n  }, [_vm._v(\"));\")]), _c('span', {\n    staticClass: \"com\"\n  }, [_vm._v(\" // Hello,world!  可以传多个参数\")])])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            基于子字符串的创建方法：\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"slice()\")]), _vm._v(\"、\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"substr()\")]), _vm._v(\"、\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"substring()\")]), _vm._v(\"。这里不展开介绍这几个方法了。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            字符串的位置方法：\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"indexOf()\")]), _vm._v(\"、\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"lastIndexOf()\")]), _vm._v(\"。这两个方法也不展开介绍。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_c('span', {\n    staticClass: \"tip\"\n  }, [_vm._v(\"ES5\")]), _vm._v(\" 还提供了删除字符串首尾空格的方法：\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"trim()\")]), _vm._v(\"。这个方法会创建一个副本（即不改变原字符串）将前置及后缀的空格删除并返回。支持这个方法的浏览器有：IE 9+、Firefox 3.5+、Safari 5+、Chrome 8+。此外 Chrome 8+ 还支持非标准的 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"trimLeft()\")]), _vm._v(\" 和 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"trimRight()\")]), _vm._v(\"，分别用于删除字符串开头或结尾的空格。\\n        \")])\n},function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('p', [_vm._v(\"\\n            字符串大小写转换的方法：\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toLowerCase()\")]), _vm._v(\"、\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toLocaleLowerCase()\")]), _vm._v(\"、\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toUpperCase()\")]), _vm._v(\"、\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"toLocaleUpperCase()\")]), _vm._v(\"。不展开介绍这些方法，\"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Locale\")]), _vm._v(\" 是针对某些特殊地区的语言的实现，对于非特殊的语言使用哪一个结果是一样的。如果不知道运行的语言环境使用 \"), _c('span', {\n    staticClass: \"code\"\n  }, [_vm._v(\"Locale\")]), _vm._v(\" 对更加稳妥。\\n        \")])\n}]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-a742facc\",\"hasScoped\":false}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/page/Blog/BlogDetail/blog_107.vue\n// module id = 592\n// module chunks = 116"],"sourceRoot":""}