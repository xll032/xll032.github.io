{
  "title":"WebSocket 简单使用和介绍",
  "type":512,
  "time":"2016/12/29 10:22",
  "content":"<p>背景介绍</p><p>要实现网站实时接收消息，如：聊天、消息推送、直播等功能，需要利用“轮询”的方法，在一定时间间隔使用 ajax 向服务器发送请求以返回相应数据。</p><p>这种方法有一个明显的缺点。需要向服务器不断发送请求，每次请求的 header 很多，而返回的数据有时候是很少的。这种行为将会对服务器造成很大的负担，响应的速度也会受到很大的影响。如果客户端很多的话，那画面太美。</p><p>针对这种情况，HTML5 开发出了 WebSocket 协议。</p><p>WebSocket 协议介绍</p><p>本质是先通过 HTTP/HTTPS 协议进行握手后创建一个用于交换数据的 TCP 连接。然后服务端与客户端通过此 TCP 连接进行实时通信</p><p>使用 WebSocket 后就不需要客户端向服务端发起请求，服务端会主动给出数据，这种交换的 header 很小。</p><p>WebSocket 的使用：</p><p>1、客户端</p><p>在支持 WebSocket 的浏览器创建 socket 后，可以通过 onopen，onmessage，onclose，onerror 四个事件实现对 socket 进行响应，下面是一个简单的示例：</p><pre class='code'><span class='key'>var </span><span class='param'>ws</span><span class='key'> = </span><span class='key'>new</span><span class='fun'> WebSocket</span><span class='word'>(</span><span class='str'>'ws://localhost:8080'</span><span class='word'>);</span><span class='com'>/* 申请一个 WebSocket 对象，参数是需要连接的服务器端的地址，WebSocket 协议以 ws:// 开头，安全的 WebSocket 协议以 wss:// 开头 */</span><br><span class='param'>ws</span><span class='word'>.</span><span class='method'>onopen</span><span class='key'> = function</span><span class='word'>()</span><span class='flower'>{</span><span class='com'>// ws 刚创建成功的时候会触发该事件</span><br><span class='param'>&nbsp;&nbsp;&nbsp;&nbsp;ws</span><span class='word'>.</span><span class='method'>send</span><span class='word'>(</span><span class='str'>'ws open.'</span><span class='word'>);</span><br><span class='flower'>}</span><span class='word'>;</span><br><span class='param'>ws</span><span class='word'>.</span><span class='method'>onmessage</span><span class='key'> = function</span><span class='word'>(evt)</span><span class='flower'>{</span><span class='com'>// 客户端收到服务端发来的信息时会触发该事件</span><br><span class='spe'>&nbsp;&nbsp;&nbsp;&nbsp;console</span><span class='word'>.</span><span class='method'>log</span><span class='word'>(evt.</span><span class='spe'>data</span><span class='word'>);</span><br><span class='flower'>}</span><span class='word'>;</span><br><span class='param'>ws</span><span class='word'>.</span><span class='method'>onclose</span><span class='key'> = function</span><span class='word'>(evt)</span><span class='flower'>{</span><span class='com'>// WebSocket 被服务器断开连接时会触发该事件</span><br><span class='spe'>&nbsp;&nbsp;&nbsp;&nbsp;console</span><span class='word'>.</span><span class='method'>log</span><span class='word'>(</span><span class='str'>'WebSocket Closed!'</span><span class='word'>);</span><br><span class='flower'>}</span><span class='word'>;</span><br><span class='param'>ws</span><span class='word'>.</span><span class='method'>onerror</span><span class='key'> = function</span><span class='word'>(evt)</span><span class='flower'>{</span><span class='com'>// 连接、处理、接收、发送数据失败时会触发该事件</span><br><span class='spe'>&nbsp;&nbsp;&nbsp;&nbsp;console</span><span class='word'>.</span><span class='method'>log</span><span class='word'>(</span><span class='str'>'WebSocket Error!'</span><span class='word'>);</span><br><span class='flower'>}</span><span class='word'>;</span></pre><p>上面的所有操作都是采用事件的方式触发的，这样不会阻塞 UI，使得 UI 响应速度更快，提升用户体验。</p><p>2、服务端</p><p>支持 WebSocket 的服务端语言有很多，如 node.js，jetty，tomcat 等</p><p>服务端代码在此不介绍，以后尝试着用 node.js 写一个 WebSocket 的交互 SPA</p>"
}