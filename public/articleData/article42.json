{
  "title":"jQuery 封装插件时，回调函数的 this 指向问题",
  "type":1,
  "time":"2016/12/14 12:40",
  "content":"<p>在 jQuery封装插件时，简单的使用 this 会产生指向问题，如下例：</p><p>JS：</p><pre class='code'><span class='word'>(</span><span class='key'>function</span><span class='word'>($)</span><span class='flower'>{</span><br><span class='spe'>&nbsp;&nbsp;&nbsp;&nbsp;$</span><span class='word'>.</span><span class='key'>fn</span><span class='word'>.</span><span class='method'>plugin</span><span class='key'> = </span><span class='key'>function</span><span class='word'>(callback)</span><span class='flower'>{</span><br><span class='word'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback();</span><br><span class='flower'>&nbsp;&nbsp;&nbsp;&nbsp;}</span><br><span class='flower'>}</span><span class='word'>)(</span><span class='globe'>jQuery</span><span class='word'>);</span><br><span class='spe'>$</span><span class='word'>(</span><span class='str'>'#app'</span><span class='word'>).</span><span class='method'>plugin</span><span class='word'>(</span><span class='key'>function</span><span class='word'>()</span><span class='flower'>{</span><br><span class='spe'>&nbsp;&nbsp;&nbsp;&nbsp;console</span><span class='word'>.</span><span class='method'>log</span><span class='word'>(</span><span class='key'>this</span><span class='word'>);</span><br><span class='flower'>}</span><span class='word'>);</span></pre><p>一般情况下，通过上述代码我们希望得到的 this 应该是 插件中指向的元素，而事实上指向的元素是不对的。上面的代码运行后，输出的是 Window 对象。</p><p>想要得到 #app 只需要使用 .call() 方法将插件方法中的 this 传入，这样回调函数使用的 this 参数指向的就是指定的插件中的 this 了，也就是例子中的 #app。见下例：</p><p>JS：</p><pre class='code'><span class='word'>(</span><span class='key'>function</span><span class='word'>($)</span><span class='flower'>{</span><br><span class='spe'>&nbsp;&nbsp;&nbsp;&nbsp;$</span><span class='word'>.</span><span class='key'>fn</span><span class='word'>.</span><span class='method'>plugin</span><span class='key'> = </span><span class='key'>function</span><span class='word'>(callback)</span><span class='flower'>{</span><br><span class='key'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var </span><span class='param'>_self</span><span class='key'> = this</span><span class='word'>;</span><br><span class='word'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback.</span><span class='method'>call</span><span class='word'>(</span><span class='param'>_self</span><span class='word'>);</span><br><span class='flower'>&nbsp;&nbsp;&nbsp;&nbsp;}</span><br><span class='flower'>}</span><span class='word'>)(jQuery);</span><br><span class='spe'>$</span><span class='word'>(</span><span class='str'>'#app'</span><span class='word'>).</span><span class='method'>plugin</span><span class='word'>(</span><span class='key'>function</span><span class='word'>()</span><span class='flower'>{</span><br><span class='spe'>&nbsp;&nbsp;&nbsp;&nbsp;console</span><span class='word'>.</span><span class='method'>log</span><span class='word'>(</span><span class='key'>this</span><span class='word'>);</span><br><span class='flower'>}</span><span class='word'>);</span></pre><p>这个方法实用性比较高，如果用 jQuery 去封装插件的话，要熟悉这个方法。</p>"
}