{
  "title":"ajax 回调 window.open 被截获",
  "type":16,
  "time":"2016/11/14 14:50",
  "content": "<p>当点击一个 button 按钮（或其他元素）后，需要跳转页面。可以直接使用 a 标签</p><p>HTML：</p><span class='arrow'>&lt;</span><span class='tag'>a</span> <span class='attr'>href=</span><span class='str'>\"//www.xxxx.com\"</span><span class='arrow'>></span><span class='word'>链接</span><span class='arrow'>&lt;/</span><span class='tag'>a</span><span class='arrow'>></span><p>还可以编写 JS 进行控制</p><p>HTML：</p><pre class='code'><span class='arrow'>&lt;</span><span class='tag'>button</span> <span class='attr'>onclick=</span><span class='str'>\"</span><span class='fun'>click</span><span class='word'>()</span><span class='str'>\"</span><span class='arrow'>></span><span class='word'>点击我</span><span class='arrow'>&lt;/</span><span class='tag'>button</span><span class='arrow'>></span></pre><p>JS：</p><pre class='code'><span class='key'>var</span> <span class='param'>click</span> <span class='key'>=</span> <span class='key'>function</span><span class='word'>()</span><span class='flower'>{</span><span class='spe'>window</span><span class='word'>.</span><span class='method'>open</span><span class='word'>(</span><span class='str'>'这里是url'</span><span class='word'>);</span><span class='flower'>}</span></pre><p>这样并不能满足所有的需求，有时候可能需要在 ajax 回调之后再进行相应的跳转。</p><p>由于浏览器对回调之后打开窗口有一个安全机制，例如请求一个数据以后，跳转到一个不安全的页面之类的，所以回调后会阻止跳转。并且这个动作是浏览器默认的</p><p>如果要让它能起作用，除非用户设置了“不对js进行安全拦截”，用户不会这么做的，我自己都不会这么做。</p><p>这个时候，并不是没有办法解决，有如下 2 种解决方案（方便起见，ajax写法使用的是jQuery，解决的方法都能适用）：</p><p>1、将一个 window.open() 存入一个变量，先打开该页面，回调后将其改为指定页面。这样可以避免回调后被阻止。</p><p>缺点：网速再快也会事先打开一个空白页面，再进行跳转，用户体验不太好。网速如果慢的话，就……</p><p>JS：</p><pre class='code'><span class='key'>var</span> <span class='globe'>_newLink</span> <span class='key'>=</span> <span class='key'>window</span><span class='word'>.</span><span class='method'>open</span><span class='word'>(</span><span class='str'>'about:blank'</span><span class='word'>);</span><br><span class='spe'>$</span><span class='word'>.</span><span class='method'>ajax</span><span class='word'>(</span><span class='flower'>{</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class='com'>/* ... */</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class='spe'>success</span><span class='word'>:</span><span class='key'>function</span><span class='word'>(data)</span><span class='flower'>{</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class='globe'>_newLink</span><span class='word'>.</span><span class='spe'>location</span><span class='word'>.</span><span class='spe'>href</span> <span class='key'>=</span> <span class='str'>'ajax传入的url'</span><span class='word'>;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class='flower'>}</span><br><span class='flower'>}</span><span class='word'>);</span></pre><p>2、将 ajax 改成同步请求，也可以正常跳转。不会有第 1 种情况的空白页跳出，用户体验尚可</p><p>倘若这个办法是万能的，那还有其他方法什么事。所以，它也有缺点：ajax 设置为同步请求，就失去了 ajax 设计的初衷，若服务器长时间不响应，代码卡死了</p><p>第 1 种和第 2 种方法需要进行权衡，对服务器放心可以用第 2 种，对浏览器不放心也不太在乎用户体验的话，可以用第 1 种</p><p>JS：</p><pre class='code'><span class='spe'>$</span><span class='word'>.</span><span class='method'>ajax</span><span class='word'>(</span><span class='flower'>{</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class='com'>/* ... */</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class='spe'>async</span><span class='word'>:</span><span class='key'>false</span><span class='word'>,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class='spe'>success</span><span class='word'>:</span><span class='key'>function</span><span class='word'>(data)</span><span class='flower'>{</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class='spe'>window</span><span class='word'>.</span><span class='method'>open</span><span class='word'>(</span><span class='str'>'ajax传入的url'</span><span class='word'>);</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class='flower'>}</span><br><span class='flower'>}</span><span class='word'>);</span></pre><p>3、为什么会有第 3 种呢？其实是没有的。</p><p>说一下第 3 种的思路：设置一个定时器，在回调之后极短的时间内再打开页面。就怕网速不行，计时器时间到了，地址还没拿到</p><p>好在这种情况也不必太担心，因为就算定时器时间设置的再长，本质还是回调后打开页面，浏览器照样会阻止操作</p><p>既然脑洞大开的话，其实用 while(true) 循环直到url不为空的时候，跳转并跳出循环不就好啦。单线程的 JS 这么一搞，那就永远等待下去吧...</p>"
}